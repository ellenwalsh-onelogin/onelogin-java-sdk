/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: support@onelogin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.sdk;

import com.onelogin.sdk.ApiException;
import com.onelogin.sdk.model.ActivateFactorRequest;
import com.onelogin.sdk.model.AddAccessTokenClaimRequest;
import com.onelogin.sdk.model.AddClientAppRequest;
import com.onelogin.sdk.model.AddRoleUsers200ResponseInner;
import com.onelogin.sdk.model.AddScopeRequest;
import com.onelogin.sdk.model.AuthMethod;
import com.onelogin.sdk.model.ClientApp;
import com.onelogin.sdk.model.Connector;
import com.onelogin.sdk.model.CreateAuthorizationServerRequest;
import com.onelogin.sdk.model.CreateEnvironmentVariableRequest;
import com.onelogin.sdk.model.CreateRoles201ResponseInner;
import com.onelogin.sdk.model.CreateSessionLoginToken200Response;
import com.onelogin.sdk.model.CreateSessionLoginToken400Response;
import com.onelogin.sdk.model.CreateSessionLoginTokenRequest;
import com.onelogin.sdk.model.Device;
import com.onelogin.sdk.model.DryRunMapping200ResponseInner;
import com.onelogin.sdk.model.EnrollFactorRequest;
import com.onelogin.sdk.model.Envvar;
import com.onelogin.sdk.model.ErrorStatus;
import com.onelogin.sdk.model.FactorInner;
import com.onelogin.sdk.model.GenerateMfaToken200Response;
import com.onelogin.sdk.model.GenerateMfaToken422Response;
import com.onelogin.sdk.model.GenerateMfaTokenRequest;
import com.onelogin.sdk.model.GenerateSamlAssertion200Response;
import com.onelogin.sdk.model.GenerateSamlAssertionRequest;
import com.onelogin.sdk.model.GenerateToken200Response;
import com.onelogin.sdk.model.GenerateToken400Response;
import com.onelogin.sdk.model.GetAuthorizationServer200Response;
import com.onelogin.sdk.model.GetAvailableFactors200ResponseInner;
import com.onelogin.sdk.model.GetClientApps200ResponseInner;
import com.onelogin.sdk.model.GetEventById200Response;
import com.onelogin.sdk.model.GetEventTypes200Response;
import com.onelogin.sdk.model.GetEvents200Response;
import com.onelogin.sdk.model.GetGroupById200Response;
import com.onelogin.sdk.model.GetGroups200Response;
import com.onelogin.sdk.model.GetRateLimit200Response;
import com.onelogin.sdk.model.GetRiskScore200Response;
import com.onelogin.sdk.model.GetRiskScore400Response;
import com.onelogin.sdk.model.GetRiskScoreRequest;
import com.onelogin.sdk.model.GetScoreInsights200Response;
import com.onelogin.sdk.model.GetUserApps200ResponseInner;
import com.onelogin.sdk.model.Hook;
import com.onelogin.sdk.model.HookStatus;
import com.onelogin.sdk.model.Id;
import com.onelogin.sdk.model.ListAccessTokenClaims200ResponseInner;
import com.onelogin.sdk.model.ListActions200ResponseInner;
import com.onelogin.sdk.model.ListAppUsers200ResponseInner;
import com.onelogin.sdk.model.ListAuthorizationServers200ResponseInner;
import com.onelogin.sdk.model.ListConditionOperators200ResponseInner;
import com.onelogin.sdk.model.ListConditionValues200ResponseInner;
import com.onelogin.sdk.model.ListConditions200ResponseInner;
import com.onelogin.sdk.model.ListMappingConditionOperators200ResponseInner;
import com.onelogin.sdk.model.ListMappingConditions200ResponseInner;
import com.onelogin.sdk.model.ListScopes200ResponseInner;
import com.onelogin.sdk.model.Log;
import com.onelogin.sdk.model.Mapping;
import com.onelogin.sdk.model.Registration;
import com.onelogin.sdk.model.RemoveRoleUsersRequest;
import com.onelogin.sdk.model.RevokeTokenRequest;
import com.onelogin.sdk.model.RiskRule;
import com.onelogin.sdk.model.Role;
import com.onelogin.sdk.model.Rule;
import com.onelogin.sdk.model.RuleId;
import com.onelogin.sdk.model.Schema;
import com.onelogin.sdk.model.Schema1;
import com.onelogin.sdk.model.SetRoleApps200ResponseInner;
import com.onelogin.sdk.model.Status;
import com.onelogin.sdk.model.TrackEventRequest;
import com.onelogin.sdk.model.UpdateAuthorizationServer400Response;
import com.onelogin.sdk.model.UpdateClientAppRequest;
import com.onelogin.sdk.model.UpdateEnvironmentVariableRequest;
import com.onelogin.sdk.model.UpdateRole200Response;
import com.onelogin.sdk.model.User;
import com.onelogin.sdk.model.V1VerifyFactor200Response;
import com.onelogin.sdk.model.V1VerifyFactorRequest;
import com.onelogin.sdk.model.VerifyEnrollmentRequest;
import com.onelogin.sdk.model.VerifyFactorRequest;
import com.onelogin.sdk.model.VerifyFactorSaml200Response;
import com.onelogin.sdk.model.VerifyFactorSamlRequest;
import com.onelogin.sdk.model.VerifyFactorVoice200ResponseInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void activateFactorTest() throws ApiException {
        Integer userId = null;
        ActivateFactorRequest activateFactorRequest = null;
        String authorization = null;
        Status response = api.activateFactor(userId, activateFactorRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAccessTokenClaimTest() throws ApiException {
        Integer id = null;
        AddAccessTokenClaimRequest addAccessTokenClaimRequest = null;
        String authorization = null;
        Id response = api.addAccessTokenClaim(id, addAccessTokenClaimRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addClientAppTest() throws ApiException {
        Integer id = null;
        AddClientAppRequest addClientAppRequest = null;
        String authorization = null;
        ClientApp response = api.addClientApp(id, addClientAppRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRoleAdminsTest() throws ApiException {
        Integer roleId = null;
        List<Integer> requestBody = null;
        String authorization = null;
        List<AddRoleUsers200ResponseInner> response = api.addRoleAdmins(roleId, requestBody, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRoleUsersTest() throws ApiException {
        Integer roleId = null;
        List<Integer> requestBody = null;
        String authorization = null;
        List<AddRoleUsers200ResponseInner> response = api.addRoleUsers(roleId, requestBody, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addScopeTest() throws ApiException {
        Integer id = null;
        AddScopeRequest addScopeRequest = null;
        String authorization = null;
        Id response = api.addScope(id, addScopeRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkMappingSortTest() throws ApiException {
        List<Integer> requestBody = null;
        String authorization = null;
        List<Integer> response = api.bulkMappingSort(requestBody, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkSortTest() throws ApiException {
        Integer appId = null;
        List<Integer> requestBody = null;
        String authorization = null;
        List<Integer> response = api.bulkSort(appId, requestBody, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAppTest() throws ApiException {
        Schema schema = null;
        String authorization = null;
        Schema response = api.createApp(schema, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAuthorizationServerTest() throws ApiException {
        CreateAuthorizationServerRequest createAuthorizationServerRequest = null;
        String authorization = null;
        Id response = api.createAuthorizationServer(createAuthorizationServerRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEnvironmentVariableTest() throws ApiException {
        CreateEnvironmentVariableRequest createEnvironmentVariableRequest = null;
        String authorization = null;
        Envvar response = api.createEnvironmentVariable(createEnvironmentVariableRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createHookTest() throws ApiException {
        Hook hook = null;
        String authorization = null;
        Hook response = api.createHook(hook, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createMappingTest() throws ApiException {
        Mapping mapping = null;
        String authorization = null;
        Integer response = api.createMapping(mapping, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRiskRuleTest() throws ApiException {
        RiskRule riskRule = null;
        String authorization = null;
        RiskRule response = api.createRiskRule(riskRule, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRolesTest() throws ApiException {
        Role role = null;
        String authorization = null;
        List<CreateRoles201ResponseInner> response = api.createRoles(role, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRuleTest() throws ApiException {
        Integer appId = null;
        Rule rule = null;
        String authorization = null;
        RuleId response = api.createRule(appId, rule, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSessionLoginTokenTest() throws ApiException {
        CreateSessionLoginTokenRequest createSessionLoginTokenRequest = null;
        String authorization = null;
        String customAllowedOriginHeader1 = null;
        CreateSessionLoginToken200Response response = api.createSessionLoginToken(createSessionLoginTokenRequest, authorization, customAllowedOriginHeader1);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        User user = null;
        String authorization = null;
        String mappings = null;
        Boolean validatePolicy = null;
        User response = api.createUser(user, authorization, mappings, validatePolicy);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccessTokenClaimTest() throws ApiException {
        Integer id = null;
        Integer claimId = null;
        String authorization = null;
        api.deleteAccessTokenClaim(id, claimId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        api.deleteApp(appId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAppParameterTest() throws ApiException {
        Integer appId = null;
        Integer parameterId = null;
        String authorization = null;
        api.deleteAppParameter(appId, parameterId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAuthorizationServerTest() throws ApiException {
        Integer id = null;
        String authorization = null;
        api.deleteAuthorizationServer(id, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEnvironmentVariableTest() throws ApiException {
        String envvarId = null;
        String authorization = null;
        api.deleteEnvironmentVariable(envvarId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFactorTest() throws ApiException {
        Integer userId = null;
        Integer deviceId = null;
        String authorization = null;
        api.deleteFactor(userId, deviceId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteHookTest() throws ApiException {
        String hookId = null;
        String authorization = null;
        api.deleteHook(hookId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteMappingTest() throws ApiException {
        Integer mappingId = null;
        String authorization = null;
        api.deleteMapping(mappingId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRiskRuleTest() throws ApiException {
        String riskRuleId = null;
        String authorization = null;
        RiskRule response = api.deleteRiskRule(riskRuleId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        Integer roleId = null;
        String authorization = null;
        api.deleteRole(roleId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRuleTest() throws ApiException {
        Integer appId = null;
        Integer ruleId = null;
        String authorization = null;
        api.deleteRule(appId, ruleId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteScopeTest() throws ApiException {
        Integer id = null;
        Integer scopeId = null;
        String authorization = null;
        api.deleteScope(id, scopeId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        Integer userId = null;
        String authorization = null;
        api.deleteUser(userId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dryRunMappingTest() throws ApiException {
        Integer mappingId = null;
        List<Integer> requestBody = null;
        String authorization = null;
        List<DryRunMapping200ResponseInner> response = api.dryRunMapping(mappingId, requestBody, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enrollFactorTest() throws ApiException {
        Integer userId = null;
        EnrollFactorRequest enrollFactorRequest = null;
        String authorization = null;
        List<List<FactorInner>> response = api.enrollFactor(userId, enrollFactorRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateMfaTokenTest() throws ApiException {
        Integer userId = null;
        GenerateMfaTokenRequest generateMfaTokenRequest = null;
        String authorization = null;
        GenerateMfaToken200Response response = api.generateMfaToken(userId, generateMfaTokenRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateSamlAssertionTest() throws ApiException {
        GenerateSamlAssertionRequest generateSamlAssertionRequest = null;
        String authorization = null;
        GenerateSamlAssertion200Response response = api.generateSamlAssertion(generateSamlAssertionRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateTokenTest() throws ApiException {
        String clientId = null;
        String clientSecret = null;
        String grantType = null;
        GenerateToken200Response response = api.generateToken(clientId, clientSecret, grantType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        Schema response = api.getApp(appId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthorizationServerTest() throws ApiException {
        Integer id = null;
        String authorization = null;
        GetAuthorizationServer200Response response = api.getAuthorizationServer(id, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvailableFactorsTest() throws ApiException {
        Integer userId = null;
        String authorization = null;
        List<GetAvailableFactors200ResponseInner> response = api.getAvailableFactors(userId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientAppsTest() throws ApiException {
        Integer id = null;
        String authorization = null;
        List<GetClientApps200ResponseInner> response = api.getClientApps(id, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnrolledFactorsTest() throws ApiException {
        Integer userId = null;
        String authorization = null;
        List<Device> response = api.getEnrolledFactors(userId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEnvironmentVariableTest() throws ApiException {
        String envvarId = null;
        String authorization = null;
        Envvar response = api.getEnvironmentVariable(envvarId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventByIdTest() throws ApiException {
        Integer eventId = null;
        String authorization = null;
        GetEventById200Response response = api.getEventById(eventId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventTypesTest() throws ApiException {
        GetEventTypes200Response response = api.getEventTypes();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        Integer userId = null;
        String authorization = null;
        String fields = null;
        String until = null;
        String since = null;
        Integer limit = null;
        String sort = null;
        Integer clientId = null;
        String createdAt = null;
        String directoryId = null;
        List<Integer> eventTypeId = null;
        Integer id = null;
        String resolution = null;
        GetEvents200Response response = api.getEvents(userId, authorization, fields, until, since, limit, sort, clientId, createdAt, directoryId, eventTypeId, id, resolution);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupByIdTest() throws ApiException {
        Integer groupId = null;
        String authorization = null;
        GetGroupById200Response response = api.getGroupById(groupId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGroupsTest() throws ApiException {
        String authorization = null;
        String fields = null;
        String until = null;
        String since = null;
        Integer limit = null;
        String sort = null;
        Integer groupId = null;
        GetGroups200Response response = api.getGroups(authorization, fields, until, since, limit, sort, groupId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHookTest() throws ApiException {
        String hookId = null;
        String authorization = null;
        Hook response = api.getHook(hookId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLogsTest() throws ApiException {
        String hookId = null;
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String requestId = null;
        String correlationId = null;
        List<Log> response = api.getLogs(hookId, authorization, limit, page, cursor, requestId, correlationId);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMappingTest() throws ApiException {
        Integer mappingId = null;
        String authorization = null;
        Mapping response = api.getMapping(mappingId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRateLimitTest() throws ApiException {
        String authorization = null;
        GetRateLimit200Response response = api.getRateLimit(authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRiskRuleTest() throws ApiException {
        String riskRuleId = null;
        String authorization = null;
        RiskRule response = api.getRiskRule(riskRuleId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRiskScoreTest() throws ApiException {
        GetRiskScoreRequest getRiskScoreRequest = null;
        String authorization = null;
        GetRiskScore200Response response = api.getRiskScore(getRiskScoreRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        Integer roleId = null;
        String authorization = null;
        Role response = api.getRole(roleId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleAdminsTest() throws ApiException {
        Integer roleId = null;
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String name = null;
        Boolean includeUnassigned = null;
        List<Schema1> response = api.getRoleAdmins(roleId, authorization, limit, page, cursor, name, includeUnassigned);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleAppsTest() throws ApiException {
        Integer roleId = null;
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        Boolean assigned = null;
        List<Schema> response = api.getRoleApps(roleId, authorization, limit, page, cursor, assigned);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRoleUsersTest() throws ApiException {
        Integer roleId = null;
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String name = null;
        Boolean includeUnassigned = null;
        List<Schema1> response = api.getRoleUsers(roleId, authorization, limit, page, cursor, name, includeUnassigned);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRuleTest() throws ApiException {
        Integer appId = null;
        Integer ruleId = null;
        String authorization = null;
        Rule response = api.getRule(appId, ruleId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScoreInsightsTest() throws ApiException {
        String authorization = null;
        String before = null;
        String after = null;
        GetScoreInsights200Response response = api.getScoreInsights(authorization, before, after);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        Integer userId = null;
        String authorization = null;
        User response = api.getUser(userId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAppsTest() throws ApiException {
        Integer userId = null;
        String authorization = null;
        Boolean ignoreVisibility = null;
        List<GetUserApps200ResponseInner> response = api.getUserApps(userId, authorization, ignoreVisibility);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessTokenClaimsTest() throws ApiException {
        Integer id = null;
        String authorization = null;
        List<ListAccessTokenClaims200ResponseInner> response = api.listAccessTokenClaims(id, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActionValuesTest() throws ApiException {
        Integer appId = null;
        String actionValue = null;
        String authorization = null;
        List<ListConditionValues200ResponseInner> response = api.listActionValues(appId, actionValue, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActionsTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        List<ListActions200ResponseInner> response = api.listActions(appId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppUsersTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        List<ListAppUsers200ResponseInner> response = api.listAppUsers(appId, authorization, limit, page, cursor);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAppsTest() throws ApiException {
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String name = null;
        Integer connectorId = null;
        AuthMethod authMethod = null;
        List<Schema> response = api.listApps(authorization, limit, page, cursor, name, connectorId, authMethod);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAuthorizationServersTest() throws ApiException {
        String authorization = null;
        List<ListAuthorizationServers200ResponseInner> response = api.listAuthorizationServers(authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConditionOperatorsTest() throws ApiException {
        Integer appId = null;
        String conditionValue = null;
        String authorization = null;
        List<ListConditionOperators200ResponseInner> response = api.listConditionOperators(appId, conditionValue, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConditionValuesTest() throws ApiException {
        Integer appId = null;
        String conditionValue = null;
        String authorization = null;
        List<ListConditionValues200ResponseInner> response = api.listConditionValues(appId, conditionValue, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConditionsTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        List<ListConditions200ResponseInner> response = api.listConditions(appId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listConnectorsTest() throws ApiException {
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String name = null;
        AuthMethod authMethod = null;
        List<Connector> response = api.listConnectors(authorization, limit, page, cursor, name, authMethod);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEnvironmentVariablesTest() throws ApiException {
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        List<Envvar> response = api.listEnvironmentVariables(authorization, limit, page, cursor);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listHooksTest() throws ApiException {
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        List<Hook> response = api.listHooks(authorization, limit, page, cursor);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingActionValuesTest() throws ApiException {
        String actionValue = null;
        String authorization = null;
        List<ListConditionValues200ResponseInner> response = api.listMappingActionValues(actionValue, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingActionsTest() throws ApiException {
        String authorization = null;
        List<ListActions200ResponseInner> response = api.listMappingActions(authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingConditionOperatorsTest() throws ApiException {
        String conditionValue = null;
        String authorization = null;
        List<ListMappingConditionOperators200ResponseInner> response = api.listMappingConditionOperators(conditionValue, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingConditionValuesTest() throws ApiException {
        String conditionValue = null;
        String authorization = null;
        List<ListConditionValues200ResponseInner> response = api.listMappingConditionValues(conditionValue, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingConditionsTest() throws ApiException {
        String authorization = null;
        List<ListMappingConditions200ResponseInner> response = api.listMappingConditions(authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMappingsTest() throws ApiException {
        String authorization = null;
        Boolean enabled = null;
        String hasCondition = null;
        String hasConditionType = null;
        String hasAction = null;
        String hasActionType = null;
        List<Mapping> response = api.listMappings(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRiskRulesTest() throws ApiException {
        String authorization = null;
        List<RiskRule> response = api.listRiskRules(authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRolesTest() throws ApiException {
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String name = null;
        String appId = null;
        String fields = null;
        List<Role> response = api.listRoles(authorization, limit, page, cursor, name, appId, fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRulesTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        Boolean enabled = null;
        String hasCondition = null;
        String hasConditionType = null;
        String hasAction = null;
        String hasActionType = null;
        List<Rule> response = api.listRules(appId, authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listScopesTest() throws ApiException {
        Integer id = null;
        String authorization = null;
        List<ListScopes200ResponseInner> response = api.listScopes(id, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUsersTest() throws ApiException {
        Integer appId = null;
        String authorization = null;
        Integer limit = null;
        Integer page = null;
        String cursor = null;
        String createdSince = null;
        String createdUntil = null;
        String updatedSince = null;
        String updatedUntil = null;
        String lastLoginSince = null;
        String lastLoginUntil = null;
        String firstname = null;
        String lastname = null;
        String email = null;
        String username = null;
        String samaccountname = null;
        String directoryId = null;
        String externalId = null;
        String userIds = null;
        String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket = null;
        String fields = null;
        List<User> response = api.listUsers(appId, authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeClientAppTest() throws ApiException {
        Integer id = null;
        Integer clientAppId = null;
        String authorization = null;
        api.removeClientApp(id, clientAppId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeRoleAdminsTest() throws ApiException {
        Integer roleId = null;
        RemoveRoleUsersRequest removeRoleUsersRequest = null;
        String authorization = null;
        api.removeRoleAdmins(roleId, removeRoleUsersRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeRoleUsersTest() throws ApiException {
        Integer roleId = null;
        RemoveRoleUsersRequest removeRoleUsersRequest = null;
        String authorization = null;
        api.removeRoleUsers(roleId, removeRoleUsersRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String authorization = null;
        RevokeTokenRequest revokeTokenRequest = null;
        GenerateToken400Response response = api.revokeToken(authorization, revokeTokenRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setRoleAppsTest() throws ApiException {
        Integer roleId = null;
        List<Integer> requestBody = null;
        String authorization = null;
        List<SetRoleApps200ResponseInner> response = api.setRoleApps(roleId, requestBody, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void trackEventTest() throws ApiException {
        TrackEventRequest trackEventRequest = null;
        String authorization = null;
        api.trackEvent(trackEventRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccessTokenClaimTest() throws ApiException {
        Integer id = null;
        Integer claimId = null;
        AddAccessTokenClaimRequest addAccessTokenClaimRequest = null;
        String authorization = null;
        Id response = api.updateAccessTokenClaim(id, claimId, addAccessTokenClaimRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAppTest() throws ApiException {
        Integer appId = null;
        Schema schema = null;
        String authorization = null;
        Schema response = api.updateApp(appId, schema, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAuthorizationServerTest() throws ApiException {
        Integer id = null;
        CreateAuthorizationServerRequest createAuthorizationServerRequest = null;
        String authorization = null;
        Id response = api.updateAuthorizationServer(id, createAuthorizationServerRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientAppTest() throws ApiException {
        Integer id = null;
        Integer clientAppId = null;
        UpdateClientAppRequest updateClientAppRequest = null;
        String authorization = null;
        ClientApp response = api.updateClientApp(id, clientAppId, updateClientAppRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEnvironmentVariableTest() throws ApiException {
        String envvarId = null;
        UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest = null;
        String authorization = null;
        Envvar response = api.updateEnvironmentVariable(envvarId, updateEnvironmentVariableRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateHookTest() throws ApiException {
        String hookId = null;
        Hook hook = null;
        String authorization = null;
        Hook response = api.updateHook(hookId, hook, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateMappingTest() throws ApiException {
        Integer mappingId = null;
        Mapping mapping = null;
        String authorization = null;
        Integer response = api.updateMapping(mappingId, mapping, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRiskRuleTest() throws ApiException {
        String riskRuleId = null;
        RiskRule riskRule = null;
        String authorization = null;
        RiskRule response = api.updateRiskRule(riskRuleId, riskRule, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        Integer roleId = null;
        Role role = null;
        String authorization = null;
        UpdateRole200Response response = api.updateRole(roleId, role, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRuleTest() throws ApiException {
        Integer appId = null;
        Integer ruleId = null;
        Rule rule = null;
        String authorization = null;
        RuleId response = api.updateRule(appId, ruleId, rule, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateScopeTest() throws ApiException {
        Integer id = null;
        Integer scopeId = null;
        AddScopeRequest addScopeRequest = null;
        String authorization = null;
        Id response = api.updateScope(id, scopeId, addScopeRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        Integer userId = null;
        User user = null;
        String authorization = null;
        String mappings = null;
        Boolean validatePolicy = null;
        User response = api.updateUser(userId, user, authorization, mappings, validatePolicy);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v1VerifyFactorTest() throws ApiException {
        V1VerifyFactorRequest v1VerifyFactorRequest = null;
        String authorization = null;
        String customAllowedOriginHeader1 = null;
        V1VerifyFactor200Response response = api.v1VerifyFactor(v1VerifyFactorRequest, authorization, customAllowedOriginHeader1);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyEnrollmentTest() throws ApiException {
        Integer userId = null;
        Integer registrationId = null;
        VerifyEnrollmentRequest verifyEnrollmentRequest = null;
        String authorization = null;
        List<Registration> response = api.verifyEnrollment(userId, registrationId, verifyEnrollmentRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyEnrollmentVoiceProtectTest() throws ApiException {
        Integer userId = null;
        Integer registrationId = null;
        String authorization = null;
        List<Registration> response = api.verifyEnrollmentVoiceProtect(userId, registrationId, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyFactorTest() throws ApiException {
        Integer userId = null;
        Integer verificationId = null;
        VerifyFactorRequest verifyFactorRequest = null;
        String authorization = null;
        GenerateToken400Response response = api.verifyFactor(userId, verificationId, verifyFactorRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyFactorSamlTest() throws ApiException {
        VerifyFactorSamlRequest verifyFactorSamlRequest = null;
        String authorization = null;
        VerifyFactorSaml200Response response = api.verifyFactorSaml(verifyFactorSamlRequest, authorization);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyFactorVoiceTest() throws ApiException {
        Integer userId = null;
        Integer verificationId = null;
        String authorization = null;
        List<VerifyFactorVoice200ResponseInner> response = api.verifyFactorVoice(userId, verificationId, authorization);
        // TODO: test validations
    }

}
