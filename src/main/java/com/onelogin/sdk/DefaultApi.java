/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: support@onelogin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.sdk;

import com.onelogin.sdk.ApiCallback;
import com.onelogin.sdk.ApiClient;
import com.onelogin.sdk.ApiException;
import com.onelogin.sdk.ApiResponse;
import com.onelogin.sdk.Configuration;
import com.onelogin.sdk.Pair;
import com.onelogin.sdk.ProgressRequestBody;
import com.onelogin.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.onelogin.sdk.model.ActivateFactorRequest;
import com.onelogin.sdk.model.AddAccessTokenClaimRequest;
import com.onelogin.sdk.model.AddClientAppRequest;
import com.onelogin.sdk.model.AddRoleUsers200ResponseInner;
import com.onelogin.sdk.model.AddScopeRequest;
import com.onelogin.sdk.model.AuthMethod;
import com.onelogin.sdk.model.ClientApp;
import com.onelogin.sdk.model.Connector;
import com.onelogin.sdk.model.CreateAuthorizationServerRequest;
import com.onelogin.sdk.model.CreateEnvironmentVariableRequest;
import com.onelogin.sdk.model.CreateRoles201ResponseInner;
import com.onelogin.sdk.model.CreateSessionLoginToken200Response;
import com.onelogin.sdk.model.CreateSessionLoginToken400Response;
import com.onelogin.sdk.model.CreateSessionLoginTokenRequest;
import com.onelogin.sdk.model.Device;
import com.onelogin.sdk.model.DryRunMapping200ResponseInner;
import com.onelogin.sdk.model.EnrollFactorRequest;
import com.onelogin.sdk.model.Envvar;
import com.onelogin.sdk.model.ErrorStatus;
import com.onelogin.sdk.model.FactorInner;
import com.onelogin.sdk.model.GenerateMfaToken200Response;
import com.onelogin.sdk.model.GenerateMfaToken422Response;
import com.onelogin.sdk.model.GenerateMfaTokenRequest;
import com.onelogin.sdk.model.GenerateSamlAssertion200Response;
import com.onelogin.sdk.model.GenerateSamlAssertionRequest;
import com.onelogin.sdk.model.GenerateToken200Response;
import com.onelogin.sdk.model.GenerateToken400Response;
import com.onelogin.sdk.model.GetAuthorizationServer200Response;
import com.onelogin.sdk.model.GetAvailableFactors200ResponseInner;
import com.onelogin.sdk.model.GetClientApps200ResponseInner;
import com.onelogin.sdk.model.GetEventById200Response;
import com.onelogin.sdk.model.GetEventTypes200Response;
import com.onelogin.sdk.model.GetEvents200Response;
import com.onelogin.sdk.model.GetGroupById200Response;
import com.onelogin.sdk.model.GetGroups200Response;
import com.onelogin.sdk.model.GetRateLimit200Response;
import com.onelogin.sdk.model.GetRiskScore200Response;
import com.onelogin.sdk.model.GetRiskScore400Response;
import com.onelogin.sdk.model.GetRiskScoreRequest;
import com.onelogin.sdk.model.GetScoreInsights200Response;
import com.onelogin.sdk.model.GetUserApps200ResponseInner;
import com.onelogin.sdk.model.Hook;
import com.onelogin.sdk.model.HookStatus;
import com.onelogin.sdk.model.Id;
import com.onelogin.sdk.model.ListAccessTokenClaims200ResponseInner;
import com.onelogin.sdk.model.ListActions200ResponseInner;
import com.onelogin.sdk.model.ListAppUsers200ResponseInner;
import com.onelogin.sdk.model.ListAuthorizationServers200ResponseInner;
import com.onelogin.sdk.model.ListConditionOperators200ResponseInner;
import com.onelogin.sdk.model.ListConditionValues200ResponseInner;
import com.onelogin.sdk.model.ListConditions200ResponseInner;
import com.onelogin.sdk.model.ListMappingConditionOperators200ResponseInner;
import com.onelogin.sdk.model.ListMappingConditions200ResponseInner;
import com.onelogin.sdk.model.ListScopes200ResponseInner;
import com.onelogin.sdk.model.Log;
import com.onelogin.sdk.model.Mapping;
import com.onelogin.sdk.model.Registration;
import com.onelogin.sdk.model.RemoveRoleUsersRequest;
import com.onelogin.sdk.model.RevokeTokenRequest;
import com.onelogin.sdk.model.RiskRule;
import com.onelogin.sdk.model.Role;
import com.onelogin.sdk.model.Rule;
import com.onelogin.sdk.model.RuleId;
import com.onelogin.sdk.model.Schema;
import com.onelogin.sdk.model.Schema1;
import com.onelogin.sdk.model.SetRoleApps200ResponseInner;
import com.onelogin.sdk.model.Status;
import com.onelogin.sdk.model.TrackEventRequest;
import com.onelogin.sdk.model.UpdateAuthorizationServer400Response;
import com.onelogin.sdk.model.UpdateClientAppRequest;
import com.onelogin.sdk.model.UpdateEnvironmentVariableRequest;
import com.onelogin.sdk.model.UpdateRole200Response;
import com.onelogin.sdk.model.User;
import com.onelogin.sdk.model.V1VerifyFactor200Response;
import com.onelogin.sdk.model.V1VerifyFactorRequest;
import com.onelogin.sdk.model.VerifyEnrollmentRequest;
import com.onelogin.sdk.model.VerifyFactorRequest;
import com.onelogin.sdk.model.VerifyFactorSaml200Response;
import com.onelogin.sdk.model.VerifyFactorSamlRequest;
import com.onelogin.sdk.model.VerifyFactorVoice200ResponseInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for activateFactor
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateFactorCall(Integer userId, ActivateFactorRequest activateFactorRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = activateFactorRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call activateFactorValidateBeforeCall(Integer userId, ActivateFactorRequest activateFactorRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling activateFactor(Async)");
        }
        
        // verify the required parameter 'activateFactorRequest' is set
        if (activateFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'activateFactorRequest' when calling activateFactor(Async)");
        }
        

        okhttp3.Call localVarCall = activateFactorCall(userId, activateFactorRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Status
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public Status activateFactor(Integer userId, ActivateFactorRequest activateFactorRequest, String authorization) throws ApiException {
        ApiResponse<Status> localVarResp = activateFactorWithHttpInfo(userId, activateFactorRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Status&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Status> activateFactorWithHttpInfo(Integer userId, ActivateFactorRequest activateFactorRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = activateFactorValidateBeforeCall(userId, activateFactorRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param activateFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call activateFactorAsync(Integer userId, ActivateFactorRequest activateFactorRequest, String authorization, final ApiCallback<Status> _callback) throws ApiException {

        okhttp3.Call localVarCall = activateFactorValidateBeforeCall(userId, activateFactorRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Status>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addAccessTokenClaim
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessTokenClaimCall(Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccessTokenClaimRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAccessTokenClaimValidateBeforeCall(Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'addAccessTokenClaimRequest' is set
        if (addAccessTokenClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'addAccessTokenClaimRequest' when calling addAccessTokenClaim(Async)");
        }
        

        okhttp3.Call localVarCall = addAccessTokenClaimCall(id, addAccessTokenClaimRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id addAccessTokenClaim(Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization) throws ApiException {
        ApiResponse<Id> localVarResp = addAccessTokenClaimWithHttpInfo(id, addAccessTokenClaimRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> addAccessTokenClaimWithHttpInfo(Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addAccessTokenClaimValidateBeforeCall(id, addAccessTokenClaimRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAccessTokenClaimAsync(Integer id, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAccessTokenClaimValidateBeforeCall(id, addAccessTokenClaimRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addClientApp
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClientAppCall(Integer id, AddClientAppRequest addClientAppRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addClientAppRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addClientAppValidateBeforeCall(Integer id, AddClientAppRequest addClientAppRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addClientApp(Async)");
        }
        
        // verify the required parameter 'addClientAppRequest' is set
        if (addClientAppRequest == null) {
            throw new ApiException("Missing the required parameter 'addClientAppRequest' when calling addClientApp(Async)");
        }
        

        okhttp3.Call localVarCall = addClientAppCall(id, addClientAppRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ClientApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ClientApp addClientApp(Integer id, AddClientAppRequest addClientAppRequest, String authorization) throws ApiException {
        ApiResponse<ClientApp> localVarResp = addClientAppWithHttpInfo(id, addClientAppRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;ClientApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientApp> addClientAppWithHttpInfo(Integer id, AddClientAppRequest addClientAppRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addClientAppValidateBeforeCall(id, addClientAppRequest, authorization, null);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addClientAppAsync(Integer id, AddClientAppRequest addClientAppRequest, String authorization, final ApiCallback<ClientApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = addClientAppValidateBeforeCall(id, addClientAppRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRoleAdmins
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleAdminsCall(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/admins"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRoleAdminsValidateBeforeCall(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addRoleAdmins(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addRoleAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = addRoleAdminsCall(roleId, requestBody, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;AddRoleUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<AddRoleUsers200ResponseInner> addRoleAdmins(Integer roleId, List<Integer> requestBody, String authorization) throws ApiException {
        ApiResponse<List<AddRoleUsers200ResponseInner>> localVarResp = addRoleAdminsWithHttpInfo(roleId, requestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;AddRoleUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddRoleUsers200ResponseInner>> addRoleAdminsWithHttpInfo(Integer roleId, List<Integer> requestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addRoleAdminsValidateBeforeCall(roleId, requestBody, authorization, null);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleAdminsAsync(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback<List<AddRoleUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRoleAdminsValidateBeforeCall(roleId, requestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRoleUsers
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleUsersCall(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/users"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRoleUsersValidateBeforeCall(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addRoleUsers(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling addRoleUsers(Async)");
        }
        

        okhttp3.Call localVarCall = addRoleUsersCall(roleId, requestBody, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;AddRoleUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public List<AddRoleUsers200ResponseInner> addRoleUsers(Integer roleId, List<Integer> requestBody, String authorization) throws ApiException {
        ApiResponse<List<AddRoleUsers200ResponseInner>> localVarResp = addRoleUsersWithHttpInfo(roleId, requestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;AddRoleUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddRoleUsers200ResponseInner>> addRoleUsersWithHttpInfo(Integer roleId, List<Integer> requestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addRoleUsersValidateBeforeCall(roleId, requestBody, authorization, null);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRoleUsersAsync(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback<List<AddRoleUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRoleUsersValidateBeforeCall(roleId, requestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<AddRoleUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addScope
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScopeCall(Integer id, AddScopeRequest addScopeRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScopeRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addScopeValidateBeforeCall(Integer id, AddScopeRequest addScopeRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addScope(Async)");
        }
        
        // verify the required parameter 'addScopeRequest' is set
        if (addScopeRequest == null) {
            throw new ApiException("Missing the required parameter 'addScopeRequest' when calling addScope(Async)");
        }
        

        okhttp3.Call localVarCall = addScopeCall(id, addScopeRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id addScope(Integer id, AddScopeRequest addScopeRequest, String authorization) throws ApiException {
        ApiResponse<Id> localVarResp = addScopeWithHttpInfo(id, addScopeRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> addScopeWithHttpInfo(Integer id, AddScopeRequest addScopeRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = addScopeValidateBeforeCall(id, addScopeRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addScopeAsync(Integer id, AddScopeRequest addScopeRequest, String authorization, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = addScopeValidateBeforeCall(id, addScopeRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkMappingSort
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkMappingSortCall(List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/sort";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkMappingSortValidateBeforeCall(List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling bulkMappingSort(Async)");
        }
        

        okhttp3.Call localVarCall = bulkMappingSortCall(requestBody, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> bulkMappingSort(List<Integer> requestBody, String authorization) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = bulkMappingSortWithHttpInfo(requestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> bulkMappingSortWithHttpInfo(List<Integer> requestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = bulkMappingSortValidateBeforeCall(requestBody, authorization, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param requestBody The request body must contain an array of User Mapping IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered mappings is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all mapping IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkMappingSortAsync(List<Integer> requestBody, String authorization, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkMappingSortValidateBeforeCall(requestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkSort
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSortCall(Integer appId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/sort"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSortValidateBeforeCall(Integer appId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling bulkSort(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling bulkSort(Async)");
        }
        

        okhttp3.Call localVarCall = bulkSortCall(appId, requestBody, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public List<Integer> bulkSort(Integer appId, List<Integer> requestBody, String authorization) throws ApiException {
        ApiResponse<List<Integer>> localVarResp = bulkSortWithHttpInfo(appId, requestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;Integer&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Integer>> bulkSortWithHttpInfo(Integer appId, List<Integer> requestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = bulkSortValidateBeforeCall(appId, requestBody, authorization, null);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param requestBody The request body must contain an array of App Rule IDs in the desired order. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On success a complete list of ordered rules is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that not all rule IDs were included in the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSortAsync(Integer appId, List<Integer> requestBody, String authorization, final ApiCallback<List<Integer>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSortValidateBeforeCall(appId, requestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<Integer>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApp
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppCall(Schema schema, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema;

        // create path and map variables
        String localVarPath = "/api/2/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAppValidateBeforeCall(Schema schema, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling createApp(Async)");
        }
        

        okhttp3.Call localVarCall = createAppCall(schema, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Schema createApp(Schema schema, String authorization) throws ApiException {
        ApiResponse<Schema> localVarResp = createAppWithHttpInfo(schema, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> createAppWithHttpInfo(Schema schema, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createAppValidateBeforeCall(schema, authorization, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAppAsync(Schema schema, String authorization, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAppValidateBeforeCall(schema, authorization, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthorizationServer
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorizationServerCall(CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthorizationServerRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthorizationServerValidateBeforeCall(CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createAuthorizationServerRequest' is set
        if (createAuthorizationServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createAuthorizationServerRequest' when calling createAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthorizationServerCall(createAuthorizationServerRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public Id createAuthorizationServer(CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization) throws ApiException {
        ApiResponse<Id> localVarResp = createAuthorizationServerWithHttpInfo(createAuthorizationServerRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> createAuthorizationServerWithHttpInfo(CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createAuthorizationServerValidateBeforeCall(createAuthorizationServerRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Audiences are required </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthorizationServerAsync(CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthorizationServerValidateBeforeCall(createAuthorizationServerRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEnvironmentVariable
     * @param createEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvironmentVariableCall(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEnvironmentVariableRequest;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEnvironmentVariableValidateBeforeCall(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createEnvironmentVariableRequest' is set
        if (createEnvironmentVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'createEnvironmentVariableRequest' when calling createEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = createEnvironmentVariableCall(createEnvironmentVariableRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Envvar createEnvironmentVariable(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, String authorization) throws ApiException {
        ApiResponse<Envvar> localVarResp = createEnvironmentVariableWithHttpInfo(createEnvironmentVariableRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> createEnvironmentVariableWithHttpInfo(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createEnvironmentVariableValidateBeforeCall(createEnvironmentVariableRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEnvironmentVariableAsync(CreateEnvironmentVariableRequest createEnvironmentVariableRequest, String authorization, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEnvironmentVariableValidateBeforeCall(createEnvironmentVariableRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createHook
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You have tried to create another function for a hook that only allows a single one to be defined. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHookCall(Hook hook, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hook;

        // create path and map variables
        String localVarPath = "/api/2/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createHookValidateBeforeCall(Hook hook, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hook' is set
        if (hook == null) {
            throw new ApiException("Missing the required parameter 'hook' when calling createHook(Async)");
        }
        

        okhttp3.Call localVarCall = createHookCall(hook, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You have tried to create another function for a hook that only allows a single one to be defined. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public Hook createHook(Hook hook, String authorization) throws ApiException {
        ApiResponse<Hook> localVarResp = createHookWithHttpInfo(hook, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You have tried to create another function for a hook that only allows a single one to be defined. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> createHookWithHttpInfo(Hook hook, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createHookValidateBeforeCall(hook, authorization, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> You have tried to create another function for a hook that only allows a single one to be defined. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createHookAsync(Hook hook, String authorization, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createHookValidateBeforeCall(hook, authorization, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createMapping
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingCall(Mapping mapping, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/api/2/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMappingValidateBeforeCall(Mapping mapping, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mapping' is set
        if (mapping == null) {
            throw new ApiException("Missing the required parameter 'mapping' when calling createMapping(Async)");
        }
        

        okhttp3.Call localVarCall = createMappingCall(mapping, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public Integer createMapping(Mapping mapping, String authorization) throws ApiException {
        ApiResponse<Integer> localVarResp = createMappingWithHttpInfo(mapping, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> createMappingWithHttpInfo(Mapping mapping, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createMappingValidateBeforeCall(mapping, authorization, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMappingAsync(Mapping mapping, String authorization, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMappingValidateBeforeCall(mapping, authorization, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRiskRule
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRiskRuleCall(RiskRule riskRule, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskRule;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRiskRuleValidateBeforeCall(RiskRule riskRule, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'riskRule' is set
        if (riskRule == null) {
            throw new ApiException("Missing the required parameter 'riskRule' when calling createRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = createRiskRuleCall(riskRule, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return RiskRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public RiskRule createRiskRule(RiskRule riskRule, String authorization) throws ApiException {
        ApiResponse<RiskRule> localVarResp = createRiskRuleWithHttpInfo(riskRule, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RiskRule> createRiskRuleWithHttpInfo(RiskRule riskRule, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createRiskRuleValidateBeforeCall(riskRule, authorization, null);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRiskRuleAsync(RiskRule riskRule, String authorization, final ApiCallback<RiskRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRiskRuleValidateBeforeCall(riskRule, authorization, _callback);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRoles
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRolesCall(Role role, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/api/2/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRolesValidateBeforeCall(Role role, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling createRoles(Async)");
        }
        

        okhttp3.Call localVarCall = createRolesCall(role, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;CreateRoles201ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<CreateRoles201ResponseInner> createRoles(Role role, String authorization) throws ApiException {
        ApiResponse<List<CreateRoles201ResponseInner>> localVarResp = createRolesWithHttpInfo(role, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;CreateRoles201ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<CreateRoles201ResponseInner>> createRolesWithHttpInfo(Role role, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createRolesValidateBeforeCall(role, authorization, null);
        Type localVarReturnType = new TypeToken<List<CreateRoles201ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRolesAsync(Role role, String authorization, final ApiCallback<List<CreateRoles201ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRolesValidateBeforeCall(role, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<CreateRoles201ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRule
     * @param appId  (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleCall(Integer appId, Rule rule, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRuleValidateBeforeCall(Integer appId, Rule rule, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createRule(Async)");
        }
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling createRule(Async)");
        }
        

        okhttp3.Call localVarCall = createRuleCall(appId, rule, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return RuleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public RuleId createRule(Integer appId, Rule rule, String authorization) throws ApiException {
        ApiResponse<RuleId> localVarResp = createRuleWithHttpInfo(appId, rule, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;RuleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleId> createRuleWithHttpInfo(Integer appId, Rule rule, String authorization) throws ApiException {
        okhttp3.Call localVarCall = createRuleValidateBeforeCall(appId, rule, authorization, null);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRuleAsync(Integer appId, Rule rule, String authorization, final ApiCallback<RuleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRuleValidateBeforeCall(appId, rule, authorization, _callback);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSessionLoginToken
     * @param createSessionLoginTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionLoginTokenCall(CreateSessionLoginTokenRequest createSessionLoginTokenRequest, String authorization, String customAllowedOriginHeader1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createSessionLoginTokenRequest;

        // create path and map variables
        String localVarPath = "/api/1/login/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (customAllowedOriginHeader1 != null) {
            localVarHeaderParams.put("Custom-Allowed-Origin-Header-1", localVarApiClient.parameterToString(customAllowedOriginHeader1));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSessionLoginTokenValidateBeforeCall(CreateSessionLoginTokenRequest createSessionLoginTokenRequest, String authorization, String customAllowedOriginHeader1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'createSessionLoginTokenRequest' is set
        if (createSessionLoginTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'createSessionLoginTokenRequest' when calling createSessionLoginToken(Async)");
        }
        

        okhttp3.Call localVarCall = createSessionLoginTokenCall(createSessionLoginTokenRequest, authorization, customAllowedOriginHeader1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param createSessionLoginTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @return CreateSessionLoginToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public CreateSessionLoginToken200Response createSessionLoginToken(CreateSessionLoginTokenRequest createSessionLoginTokenRequest, String authorization, String customAllowedOriginHeader1) throws ApiException {
        ApiResponse<CreateSessionLoginToken200Response> localVarResp = createSessionLoginTokenWithHttpInfo(createSessionLoginTokenRequest, authorization, customAllowedOriginHeader1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param createSessionLoginTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @return ApiResponse&lt;CreateSessionLoginToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSessionLoginToken200Response> createSessionLoginTokenWithHttpInfo(CreateSessionLoginTokenRequest createSessionLoginTokenRequest, String authorization, String customAllowedOriginHeader1) throws ApiException {
        okhttp3.Call localVarCall = createSessionLoginTokenValidateBeforeCall(createSessionLoginTokenRequest, authorization, customAllowedOriginHeader1, null);
        Type localVarReturnType = new TypeToken<CreateSessionLoginToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param createSessionLoginTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSessionLoginTokenAsync(CreateSessionLoginTokenRequest createSessionLoginTokenRequest, String authorization, String customAllowedOriginHeader1, final ApiCallback<CreateSessionLoginToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSessionLoginTokenValidateBeforeCall(createSessionLoginTokenRequest, authorization, customAllowedOriginHeader1, _callback);
        Type localVarReturnType = new TypeToken<CreateSessionLoginToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createUser
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserCall(User user, String authorization, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mappings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappings", mappings));
        }

        if (validatePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_policy", validatePolicy));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createUserValidateBeforeCall(User user, String authorization, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling createUser(Async)");
        }
        

        okhttp3.Call localVarCall = createUserCall(user, authorization, mappings, validatePolicy, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public User createUser(User user, String authorization, String mappings, Boolean validatePolicy) throws ApiException {
        ApiResponse<User> localVarResp = createUserWithHttpInfo(user, authorization, mappings, validatePolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> createUserWithHttpInfo(User user, String authorization, String mappings, Boolean validatePolicy) throws ApiException {
        okhttp3.Call localVarCall = createUserValidateBeforeCall(user, authorization, mappings, validatePolicy, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createUserAsync(User user, String authorization, String mappings, Boolean validatePolicy, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = createUserValidateBeforeCall(user, authorization, mappings, validatePolicy, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAccessTokenClaim
     * @param id  (required)
     * @param claimId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessTokenClaimCall(Integer id, Integer claimId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims/{claim_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "claim_id" + "\\}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessTokenClaimValidateBeforeCall(Integer id, Integer claimId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling deleteAccessTokenClaim(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAccessTokenClaimCall(id, claimId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param claimId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccessTokenClaim(Integer id, Integer claimId, String authorization) throws ApiException {
        deleteAccessTokenClaimWithHttpInfo(id, claimId, authorization);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param claimId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccessTokenClaimWithHttpInfo(Integer id, Integer claimId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessTokenClaimValidateBeforeCall(id, claimId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param claimId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccessTokenClaimAsync(Integer id, Integer claimId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessTokenClaimValidateBeforeCall(id, claimId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteApp
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppValidateBeforeCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteApp(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAppCall(appId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteApp(Integer appId, String authorization) throws ApiException {
        deleteAppWithHttpInfo(appId, authorization);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAppWithHttpInfo(Integer appId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(appId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppAsync(Integer appId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppValidateBeforeCall(appId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAppParameter
     * @param appId  (required)
     * @param parameterId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppParameterCall(Integer appId, Integer parameterId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/parameters/{parameter_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "parameter_id" + "\\}", localVarApiClient.escapeString(parameterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAppParameterValidateBeforeCall(Integer appId, Integer parameterId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteAppParameter(Async)");
        }
        
        // verify the required parameter 'parameterId' is set
        if (parameterId == null) {
            throw new ApiException("Missing the required parameter 'parameterId' when calling deleteAppParameter(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAppParameterCall(appId, parameterId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param parameterId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAppParameter(Integer appId, Integer parameterId, String authorization) throws ApiException {
        deleteAppParameterWithHttpInfo(appId, parameterId, authorization);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param parameterId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAppParameterWithHttpInfo(Integer appId, Integer parameterId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteAppParameterValidateBeforeCall(appId, parameterId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param parameterId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> You attempted to delete a connector level parameter. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAppParameterAsync(Integer appId, Integer parameterId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAppParameterValidateBeforeCall(appId, parameterId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthorizationServer
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthorizationServerCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthorizationServerValidateBeforeCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAuthorizationServerCall(id, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAuthorizationServer(Integer id, String authorization) throws ApiException {
        deleteAuthorizationServerWithHttpInfo(id, authorization);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAuthorizationServerWithHttpInfo(Integer id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthorizationServerValidateBeforeCall(id, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthorizationServerAsync(Integer id, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthorizationServerValidateBeforeCall(id, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteEnvironmentVariable
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentVariableCall(String envvarId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs/{envvar_id}"
            .replaceAll("\\{" + "envvar_id" + "\\}", localVarApiClient.escapeString(envvarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEnvironmentVariableValidateBeforeCall(String envvarId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'envvarId' is set
        if (envvarId == null) {
            throw new ApiException("Missing the required parameter 'envvarId' when calling deleteEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = deleteEnvironmentVariableCall(envvarId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteEnvironmentVariable(String envvarId, String authorization) throws ApiException {
        deleteEnvironmentVariableWithHttpInfo(envvarId, authorization);
    }

    /**
     * 
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteEnvironmentVariableWithHttpInfo(String envvarId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteEnvironmentVariableValidateBeforeCall(envvarId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Success. The environment variable has been deleted. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteEnvironmentVariableAsync(String envvarId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEnvironmentVariableValidateBeforeCall(envvarId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFactor
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFactorCall(Integer userId, Integer deviceId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/devices/{device_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "device_id" + "\\}", localVarApiClient.escapeString(deviceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFactorValidateBeforeCall(Integer userId, Integer deviceId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteFactor(Async)");
        }
        
        // verify the required parameter 'deviceId' is set
        if (deviceId == null) {
            throw new ApiException("Missing the required parameter 'deviceId' when calling deleteFactor(Async)");
        }
        

        okhttp3.Call localVarCall = deleteFactorCall(userId, deviceId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFactor(Integer userId, Integer deviceId, String authorization) throws ApiException {
        deleteFactorWithHttpInfo(userId, deviceId, authorization);
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFactorWithHttpInfo(Integer userId, Integer deviceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteFactorValidateBeforeCall(userId, deviceId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param deviceId Set to the device_id of the MFA device. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFactorAsync(Integer userId, Integer deviceId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFactorValidateBeforeCall(userId, deviceId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteHook
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHookCall(String hookId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteHookValidateBeforeCall(String hookId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling deleteHook(Async)");
        }
        

        okhttp3.Call localVarCall = deleteHookCall(hookId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteHook(String hookId, String authorization) throws ApiException {
        deleteHookWithHttpInfo(hookId, authorization);
    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteHookWithHttpInfo(String hookId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteHookValidateBeforeCall(hookId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Success. The hook function has been queued for deletion. This typically happens within seconds of making the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteHookAsync(String hookId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteHookValidateBeforeCall(hookId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMapping
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMappingCall(Integer mappingId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMappingValidateBeforeCall(Integer mappingId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling deleteMapping(Async)");
        }
        

        okhttp3.Call localVarCall = deleteMappingCall(mappingId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteMapping(Integer mappingId, String authorization) throws ApiException {
        deleteMappingWithHttpInfo(mappingId, authorization);
    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteMappingWithHttpInfo(Integer mappingId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(mappingId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMappingAsync(Integer mappingId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMappingValidateBeforeCall(mappingId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRiskRule
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRiskRuleCall(String riskRuleId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules/{risk_rule_id}"
            .replaceAll("\\{" + "risk_rule_id" + "\\}", localVarApiClient.escapeString(riskRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRiskRuleValidateBeforeCall(String riskRuleId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'riskRuleId' is set
        if (riskRuleId == null) {
            throw new ApiException("Missing the required parameter 'riskRuleId' when calling deleteRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRiskRuleCall(riskRuleId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return RiskRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public RiskRule deleteRiskRule(String riskRuleId, String authorization) throws ApiException {
        ApiResponse<RiskRule> localVarResp = deleteRiskRuleWithHttpInfo(riskRuleId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RiskRule> deleteRiskRuleWithHttpInfo(String riskRuleId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteRiskRuleValidateBeforeCall(riskRuleId, authorization, null);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRiskRuleAsync(String riskRuleId, String authorization, final ApiCallback<RiskRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRiskRuleValidateBeforeCall(riskRuleId, authorization, _callback);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(Integer roleId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(Integer roleId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleCall(roleId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRole(Integer roleId, String authorization) throws ApiException {
        deleteRoleWithHttpInfo(roleId, authorization);
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRoleWithHttpInfo(Integer roleId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(Integer roleId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(roleId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRule
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleCall(Integer appId, Integer ruleId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/{rule_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "rule_id" + "\\}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRuleValidateBeforeCall(Integer appId, Integer ruleId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling deleteRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRuleCall(appId, ruleId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteRule(Integer appId, Integer ruleId, String authorization) throws ApiException {
        deleteRuleWithHttpInfo(appId, ruleId, authorization);
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteRuleWithHttpInfo(Integer appId, Integer ruleId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(appId, ruleId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRuleAsync(Integer appId, Integer ruleId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRuleValidateBeforeCall(appId, ruleId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteScope
     * @param id  (required)
     * @param scopeId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScopeCall(Integer id, Integer scopeId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes/{scope_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "scope_id" + "\\}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteScopeValidateBeforeCall(Integer id, Integer scopeId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteScope(Async)");
        }
        
        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling deleteScope(Async)");
        }
        

        okhttp3.Call localVarCall = deleteScopeCall(id, scopeId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param scopeId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteScope(Integer id, Integer scopeId, String authorization) throws ApiException {
        deleteScopeWithHttpInfo(id, scopeId, authorization);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param scopeId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteScopeWithHttpInfo(Integer id, Integer scopeId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteScopeValidateBeforeCall(id, scopeId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param scopeId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteScopeAsync(Integer id, Integer scopeId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteScopeValidateBeforeCall(id, scopeId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUser
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling deleteUser(Async)");
        }
        

        okhttp3.Call localVarCall = deleteUserCall(userId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(Integer userId, String authorization) throws ApiException {
        deleteUserWithHttpInfo(userId, authorization);
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(Integer userId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> On success, no content is returned in the response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(Integer userId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(userId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dryRunMapping
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dryRunMappingCall(Integer mappingId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}/dryrun"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dryRunMappingValidateBeforeCall(Integer mappingId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling dryRunMapping(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling dryRunMapping(Async)");
        }
        

        okhttp3.Call localVarCall = dryRunMappingCall(mappingId, requestBody, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;DryRunMapping200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public List<DryRunMapping200ResponseInner> dryRunMapping(Integer mappingId, List<Integer> requestBody, String authorization) throws ApiException {
        ApiResponse<List<DryRunMapping200ResponseInner>> localVarResp = dryRunMappingWithHttpInfo(mappingId, requestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;DryRunMapping200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DryRunMapping200ResponseInner>> dryRunMappingWithHttpInfo(Integer mappingId, List<Integer> requestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = dryRunMappingValidateBeforeCall(mappingId, requestBody, authorization, null);
        Type localVarReturnType = new TypeToken<List<DryRunMapping200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param requestBody Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dryRunMappingAsync(Integer mappingId, List<Integer> requestBody, String authorization, final ApiCallback<List<DryRunMapping200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = dryRunMappingValidateBeforeCall(mappingId, requestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<DryRunMapping200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enrollFactor
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollFactorCall(Integer userId, EnrollFactorRequest enrollFactorRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enrollFactorRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enrollFactorValidateBeforeCall(Integer userId, EnrollFactorRequest enrollFactorRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling enrollFactor(Async)");
        }
        
        // verify the required parameter 'enrollFactorRequest' is set
        if (enrollFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'enrollFactorRequest' when calling enrollFactor(Async)");
        }
        

        okhttp3.Call localVarCall = enrollFactorCall(userId, enrollFactorRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;List&lt;FactorInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<List<FactorInner>> enrollFactor(Integer userId, EnrollFactorRequest enrollFactorRequest, String authorization) throws ApiException {
        ApiResponse<List<List<FactorInner>>> localVarResp = enrollFactorWithHttpInfo(userId, enrollFactorRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;List&lt;FactorInner&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<List<FactorInner>>> enrollFactorWithHttpInfo(Integer userId, EnrollFactorRequest enrollFactorRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = enrollFactorValidateBeforeCall(userId, enrollFactorRequest, authorization, null);
        Type localVarReturnType = new TypeToken<List<List<FactorInner>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param enrollFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> CREATED </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enrollFactorAsync(Integer userId, EnrollFactorRequest enrollFactorRequest, String authorization, final ApiCallback<List<List<FactorInner>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = enrollFactorValidateBeforeCall(userId, enrollFactorRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<List<FactorInner>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMfaToken
     * @param userId Set to the id of the user. (required)
     * @param generateMfaTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMfaTokenCall(Integer userId, GenerateMfaTokenRequest generateMfaTokenRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateMfaTokenRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfs/users/{user_id}/mfa_token"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMfaTokenValidateBeforeCall(Integer userId, GenerateMfaTokenRequest generateMfaTokenRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling generateMfaToken(Async)");
        }
        
        // verify the required parameter 'generateMfaTokenRequest' is set
        if (generateMfaTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'generateMfaTokenRequest' when calling generateMfaToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateMfaTokenCall(userId, generateMfaTokenRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param generateMfaTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GenerateMfaToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateMfaToken200Response generateMfaToken(Integer userId, GenerateMfaTokenRequest generateMfaTokenRequest, String authorization) throws ApiException {
        ApiResponse<GenerateMfaToken200Response> localVarResp = generateMfaTokenWithHttpInfo(userId, generateMfaTokenRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param generateMfaTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GenerateMfaToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateMfaToken200Response> generateMfaTokenWithHttpInfo(Integer userId, GenerateMfaTokenRequest generateMfaTokenRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = generateMfaTokenValidateBeforeCall(userId, generateMfaTokenRequest, authorization, null);
        Type localVarReturnType = new TypeToken<GenerateMfaToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param generateMfaTokenRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The structure of the request payload is correct but it contains an invalid value. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMfaTokenAsync(Integer userId, GenerateMfaTokenRequest generateMfaTokenRequest, String authorization, final ApiCallback<GenerateMfaToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMfaTokenValidateBeforeCall(userId, generateMfaTokenRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<GenerateMfaToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateSamlAssertion
     * @param generateSamlAssertionRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSamlAssertionCall(GenerateSamlAssertionRequest generateSamlAssertionRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateSamlAssertionRequest;

        // create path and map variables
        String localVarPath = "/api/2/saml_assertion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSamlAssertionValidateBeforeCall(GenerateSamlAssertionRequest generateSamlAssertionRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'generateSamlAssertionRequest' is set
        if (generateSamlAssertionRequest == null) {
            throw new ApiException("Missing the required parameter 'generateSamlAssertionRequest' when calling generateSamlAssertion(Async)");
        }
        

        okhttp3.Call localVarCall = generateSamlAssertionCall(generateSamlAssertionRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param generateSamlAssertionRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GenerateSamlAssertion200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public GenerateSamlAssertion200Response generateSamlAssertion(GenerateSamlAssertionRequest generateSamlAssertionRequest, String authorization) throws ApiException {
        ApiResponse<GenerateSamlAssertion200Response> localVarResp = generateSamlAssertionWithHttpInfo(generateSamlAssertionRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param generateSamlAssertionRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GenerateSamlAssertion200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateSamlAssertion200Response> generateSamlAssertionWithHttpInfo(GenerateSamlAssertionRequest generateSamlAssertionRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = generateSamlAssertionValidateBeforeCall(generateSamlAssertionRequest, authorization, null);
        Type localVarReturnType = new TypeToken<GenerateSamlAssertion200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param generateSamlAssertionRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSamlAssertionAsync(GenerateSamlAssertionRequest generateSamlAssertionRequest, String authorization, final ApiCallback<GenerateSamlAssertion200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSamlAssertionValidateBeforeCall(generateSamlAssertionRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<GenerateSamlAssertion200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateToken
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenCall(String clientId, String clientSecret, String grantType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/oauth2/v2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTokenValidateBeforeCall(String clientId, String clientSecret, String grantType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling generateToken(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling generateToken(Async)");
        }
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling generateToken(Async)");
        }
        

        okhttp3.Call localVarCall = generateTokenCall(clientId, clientSecret, grantType, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @return GenerateToken200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateToken200Response generateToken(String clientId, String clientSecret, String grantType) throws ApiException {
        ApiResponse<GenerateToken200Response> localVarResp = generateTokenWithHttpInfo(clientId, clientSecret, grantType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @return ApiResponse&lt;GenerateToken200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateToken200Response> generateTokenWithHttpInfo(String clientId, String clientSecret, String grantType) throws ApiException {
        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(clientId, clientSecret, grantType, null);
        Type localVarReturnType = new TypeToken<GenerateToken200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Typically, either grant_type value is incorrect or Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTokenAsync(String clientId, String clientSecret, String grantType, final ApiCallback<GenerateToken200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTokenValidateBeforeCall(clientId, clientSecret, grantType, _callback);
        Type localVarReturnType = new TypeToken<GenerateToken200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApp
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppValidateBeforeCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getApp(Async)");
        }
        

        okhttp3.Call localVarCall = getAppCall(appId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Schema getApp(Integer appId, String authorization) throws ApiException {
        ApiResponse<Schema> localVarResp = getAppWithHttpInfo(appId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> getAppWithHttpInfo(Integer appId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getAppValidateBeforeCall(appId, authorization, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAppAsync(Integer appId, String authorization, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppValidateBeforeCall(appId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthorizationServer
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationServerCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthorizationServerValidateBeforeCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = getAuthorizationServerCall(id, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GetAuthorizationServer200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public GetAuthorizationServer200Response getAuthorizationServer(Integer id, String authorization) throws ApiException {
        ApiResponse<GetAuthorizationServer200Response> localVarResp = getAuthorizationServerWithHttpInfo(id, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GetAuthorizationServer200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetAuthorizationServer200Response> getAuthorizationServerWithHttpInfo(Integer id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getAuthorizationServerValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<GetAuthorizationServer200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOT FOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthorizationServerAsync(Integer id, String authorization, final ApiCallback<GetAuthorizationServer200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthorizationServerValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetAuthorizationServer200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAvailableFactors
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableFactorsCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/factors"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableFactorsValidateBeforeCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getAvailableFactors(Async)");
        }
        

        okhttp3.Call localVarCall = getAvailableFactorsCall(userId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;GetAvailableFactors200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<GetAvailableFactors200ResponseInner> getAvailableFactors(Integer userId, String authorization) throws ApiException {
        ApiResponse<List<GetAvailableFactors200ResponseInner>> localVarResp = getAvailableFactorsWithHttpInfo(userId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;GetAvailableFactors200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetAvailableFactors200ResponseInner>> getAvailableFactorsWithHttpInfo(Integer userId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getAvailableFactorsValidateBeforeCall(userId, authorization, null);
        Type localVarReturnType = new TypeToken<List<GetAvailableFactors200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAvailableFactorsAsync(Integer userId, String authorization, final ApiCallback<List<GetAvailableFactors200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableFactorsValidateBeforeCall(userId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<GetAvailableFactors200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClientApps
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientAppsCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClientAppsValidateBeforeCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getClientApps(Async)");
        }
        

        okhttp3.Call localVarCall = getClientAppsCall(id, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;GetClientApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<GetClientApps200ResponseInner> getClientApps(Integer id, String authorization) throws ApiException {
        ApiResponse<List<GetClientApps200ResponseInner>> localVarResp = getClientAppsWithHttpInfo(id, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;GetClientApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetClientApps200ResponseInner>> getClientAppsWithHttpInfo(Integer id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getClientAppsValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<List<GetClientApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClientAppsAsync(Integer id, String authorization, final ApiCallback<List<GetClientApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClientAppsValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<GetClientApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnrolledFactors
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrolledFactorsCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/devices"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnrolledFactorsValidateBeforeCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEnrolledFactors(Async)");
        }
        

        okhttp3.Call localVarCall = getEnrolledFactorsCall(userId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;Device&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Device> getEnrolledFactors(Integer userId, String authorization) throws ApiException {
        ApiResponse<List<Device>> localVarResp = getEnrolledFactorsWithHttpInfo(userId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;Device&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Device>> getEnrolledFactorsWithHttpInfo(Integer userId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getEnrolledFactorsValidateBeforeCall(userId, authorization, null);
        Type localVarReturnType = new TypeToken<List<Device>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnrolledFactorsAsync(Integer userId, String authorization, final ApiCallback<List<Device>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnrolledFactorsValidateBeforeCall(userId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<Device>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEnvironmentVariable
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentVariableCall(String envvarId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs/{envvar_id}"
            .replaceAll("\\{" + "envvar_id" + "\\}", localVarApiClient.escapeString(envvarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEnvironmentVariableValidateBeforeCall(String envvarId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'envvarId' is set
        if (envvarId == null) {
            throw new ApiException("Missing the required parameter 'envvarId' when calling getEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = getEnvironmentVariableCall(envvarId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public Envvar getEnvironmentVariable(String envvarId, String authorization) throws ApiException {
        ApiResponse<Envvar> localVarResp = getEnvironmentVariableWithHttpInfo(envvarId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> getEnvironmentVariableWithHttpInfo(String envvarId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getEnvironmentVariableValidateBeforeCall(envvarId, authorization, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEnvironmentVariableAsync(String envvarId, String authorization, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEnvironmentVariableValidateBeforeCall(envvarId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventById
     * @param eventId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventByIdCall(Integer eventId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/1/events/{event_id}"
            .replaceAll("\\{" + "event_id" + "\\}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventByIdValidateBeforeCall(Integer eventId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getEventById(Async)");
        }
        

        okhttp3.Call localVarCall = getEventByIdCall(eventId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GetEventById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public GetEventById200Response getEventById(Integer eventId, String authorization) throws ApiException {
        ApiResponse<GetEventById200Response> localVarResp = getEventByIdWithHttpInfo(eventId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param eventId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GetEventById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEventById200Response> getEventByIdWithHttpInfo(Integer eventId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(eventId, authorization, null);
        Type localVarReturnType = new TypeToken<GetEventById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param eventId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventByIdAsync(Integer eventId, String authorization, final ApiCallback<GetEventById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventByIdValidateBeforeCall(eventId, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetEventById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEventTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/1/events/types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getEventTypesCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return GetEventTypes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetEventTypes200Response getEventTypes() throws ApiException {
        ApiResponse<GetEventTypes200Response> localVarResp = getEventTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;GetEventTypes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEventTypes200Response> getEventTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEventTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetEventTypes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventTypesAsync(final ApiCallback<GetEventTypes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetEventTypes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEvents
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param clientId  (optional)
     * @param createdAt  (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param eventTypeId  (optional)
     * @param id  (optional)
     * @param resolution  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsCall(Integer userId, String authorization, String fields, String until, String since, Integer limit, String sort, Integer clientId, String createdAt, String directoryId, List<Integer> eventTypeId, Integer id, String resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/1/events"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("client_id", clientId));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at", createdAt));
        }

        if (directoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("directory_id", directoryId));
        }

        if (eventTypeId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "event_type_id", eventTypeId));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEventsValidateBeforeCall(Integer userId, String authorization, String fields, String until, String since, Integer limit, String sort, Integer clientId, String createdAt, String directoryId, List<Integer> eventTypeId, Integer id, String resolution, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getEvents(Async)");
        }
        

        okhttp3.Call localVarCall = getEventsCall(userId, authorization, fields, until, since, limit, sort, clientId, createdAt, directoryId, eventTypeId, id, resolution, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param clientId  (optional)
     * @param createdAt  (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param eventTypeId  (optional)
     * @param id  (optional)
     * @param resolution  (optional)
     * @return GetEvents200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetEvents200Response getEvents(Integer userId, String authorization, String fields, String until, String since, Integer limit, String sort, Integer clientId, String createdAt, String directoryId, List<Integer> eventTypeId, Integer id, String resolution) throws ApiException {
        ApiResponse<GetEvents200Response> localVarResp = getEventsWithHttpInfo(userId, authorization, fields, until, since, limit, sort, clientId, createdAt, directoryId, eventTypeId, id, resolution);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param clientId  (optional)
     * @param createdAt  (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param eventTypeId  (optional)
     * @param id  (optional)
     * @param resolution  (optional)
     * @return ApiResponse&lt;GetEvents200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEvents200Response> getEventsWithHttpInfo(Integer userId, String authorization, String fields, String until, String since, Integer limit, String sort, Integer clientId, String createdAt, String directoryId, List<Integer> eventTypeId, Integer id, String resolution) throws ApiException {
        okhttp3.Call localVarCall = getEventsValidateBeforeCall(userId, authorization, fields, until, since, limit, sort, clientId, createdAt, directoryId, eventTypeId, id, resolution, null);
        Type localVarReturnType = new TypeToken<GetEvents200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param clientId  (optional)
     * @param createdAt  (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param eventTypeId  (optional)
     * @param id  (optional)
     * @param resolution  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEventsAsync(Integer userId, String authorization, String fields, String until, String since, Integer limit, String sort, Integer clientId, String createdAt, String directoryId, List<Integer> eventTypeId, Integer id, String resolution, final ApiCallback<GetEvents200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEventsValidateBeforeCall(userId, authorization, fields, until, since, limit, sort, clientId, createdAt, directoryId, eventTypeId, id, resolution, _callback);
        Type localVarReturnType = new TypeToken<GetEvents200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroupById
     * @param groupId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupByIdCall(Integer groupId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/1/groups/{group_id}"
            .replaceAll("\\{" + "group_id" + "\\}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupByIdValidateBeforeCall(Integer groupId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling getGroupById(Async)");
        }
        

        okhttp3.Call localVarCall = getGroupByIdCall(groupId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GetGroupById200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public GetGroupById200Response getGroupById(Integer groupId, String authorization) throws ApiException {
        ApiResponse<GetGroupById200Response> localVarResp = getGroupByIdWithHttpInfo(groupId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param groupId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GetGroupById200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroupById200Response> getGroupByIdWithHttpInfo(Integer groupId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getGroupByIdValidateBeforeCall(groupId, authorization, null);
        Type localVarReturnType = new TypeToken<GetGroupById200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param groupId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupByIdAsync(Integer groupId, String authorization, final ApiCallback<GetGroupById200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupByIdValidateBeforeCall(groupId, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetGroupById200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGroups
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param groupId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsCall(String authorization, String fields, String until, String since, Integer limit, String sort, Integer groupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/1/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group_id", groupId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGroupsValidateBeforeCall(String authorization, String fields, String until, String since, Integer limit, String sort, Integer groupId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getGroupsCall(authorization, fields, until, since, limit, sort, groupId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param groupId  (optional)
     * @return GetGroups200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public GetGroups200Response getGroups(String authorization, String fields, String until, String since, Integer limit, String sort, Integer groupId) throws ApiException {
        ApiResponse<GetGroups200Response> localVarResp = getGroupsWithHttpInfo(authorization, fields, until, since, limit, sort, groupId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param groupId  (optional)
     * @return ApiResponse&lt;GetGroups200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetGroups200Response> getGroupsWithHttpInfo(String authorization, String fields, String until, String since, Integer limit, String sort, Integer groupId) throws ApiException {
        okhttp3.Call localVarCall = getGroupsValidateBeforeCall(authorization, fields, until, since, limit, sort, groupId, null);
        Type localVarReturnType = new TypeToken<GetGroups200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param until Include the until query parameter to return results with created_at before the value (optional)
     * @param since Include the until query parameter to return results with created_at after the value (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param sort When you call a resource API, include the sort query parameter to sort results by id attribute value. (optional)
     * @param groupId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGroupsAsync(String authorization, String fields, String until, String since, Integer limit, String sort, Integer groupId, final ApiCallback<GetGroups200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGroupsValidateBeforeCall(authorization, fields, until, since, limit, sort, groupId, _callback);
        Type localVarReturnType = new TypeToken<GetGroups200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHook
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHookCall(String hookId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHookValidateBeforeCall(String hookId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling getHook(Async)");
        }
        

        okhttp3.Call localVarCall = getHookCall(hookId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Hook getHook(String hookId, String authorization) throws ApiException {
        ApiResponse<Hook> localVarResp = getHookWithHttpInfo(hookId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> getHookWithHttpInfo(String hookId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getHookValidateBeforeCall(hookId, authorization, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHookAsync(String hookId, String authorization, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHookValidateBeforeCall(hookId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogs
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogsCall(String hookId, String authorization, Integer limit, Integer page, String cursor, String requestId, String correlationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}/logs"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request_id", requestId));
        }

        if (correlationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("correlation_id", correlationId));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogsValidateBeforeCall(String hookId, String authorization, Integer limit, Integer page, String cursor, String requestId, String correlationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling getLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getLogsCall(hookId, authorization, limit, page, cursor, requestId, correlationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @return List&lt;Log&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Log> getLogs(String hookId, String authorization, Integer limit, Integer page, String cursor, String requestId, String correlationId) throws ApiException {
        ApiResponse<List<Log>> localVarResp = getLogsWithHttpInfo(hookId, authorization, limit, page, cursor, requestId, correlationId);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @return ApiResponse&lt;List&lt;Log&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Log>> getLogsWithHttpInfo(String hookId, String authorization, Integer limit, Integer page, String cursor, String requestId, String correlationId) throws ApiException {
        okhttp3.Call localVarCall = getLogsValidateBeforeCall(hookId, authorization, limit, page, cursor, requestId, correlationId, null);
        Type localVarReturnType = new TypeToken<List<Log>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param requestId Returns logs that contain this request_id. (optional)
     * @param correlationId Returns logs that contain this correlation_id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogsAsync(String hookId, String authorization, Integer limit, Integer page, String cursor, String requestId, String correlationId, final ApiCallback<List<Log>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogsValidateBeforeCall(hookId, authorization, limit, page, cursor, requestId, correlationId, _callback);
        Type localVarReturnType = new TypeToken<List<Log>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMapping
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingCall(Integer mappingId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMappingValidateBeforeCall(Integer mappingId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling getMapping(Async)");
        }
        

        okhttp3.Call localVarCall = getMappingCall(mappingId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Mapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Mapping getMapping(Integer mappingId, String authorization) throws ApiException {
        ApiResponse<Mapping> localVarResp = getMappingWithHttpInfo(mappingId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Mapping> getMappingWithHttpInfo(Integer mappingId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getMappingValidateBeforeCall(mappingId, authorization, null);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMappingAsync(Integer mappingId, String authorization, final ApiCallback<Mapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMappingValidateBeforeCall(mappingId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Mapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRateLimit
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. If you receive this error, ensure that you are making a GET. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateLimitCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/auth/rate_limit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRateLimitValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getRateLimitCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GetRateLimit200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. If you receive this error, ensure that you are making a GET. </td><td>  -  </td></tr>
     </table>
     */
    public GetRateLimit200Response getRateLimit(String authorization) throws ApiException {
        ApiResponse<GetRateLimit200Response> localVarResp = getRateLimitWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GetRateLimit200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. If you receive this error, ensure that you are making a GET. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRateLimit200Response> getRateLimitWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRateLimitValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<GetRateLimit200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. If you receive this error, ensure that you are making a GET. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRateLimitAsync(String authorization, final ApiCallback<GetRateLimit200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRateLimitValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<GetRateLimit200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRiskRule
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskRuleCall(String riskRuleId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules/{risk_rule_id}"
            .replaceAll("\\{" + "risk_rule_id" + "\\}", localVarApiClient.escapeString(riskRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRiskRuleValidateBeforeCall(String riskRuleId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'riskRuleId' is set
        if (riskRuleId == null) {
            throw new ApiException("Missing the required parameter 'riskRuleId' when calling getRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = getRiskRuleCall(riskRuleId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return RiskRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public RiskRule getRiskRule(String riskRuleId, String authorization) throws ApiException {
        ApiResponse<RiskRule> localVarResp = getRiskRuleWithHttpInfo(riskRuleId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RiskRule> getRiskRuleWithHttpInfo(String riskRuleId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRiskRuleValidateBeforeCall(riskRuleId, authorization, null);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param riskRuleId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskRuleAsync(String riskRuleId, String authorization, final ApiCallback<RiskRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRiskRuleValidateBeforeCall(riskRuleId, authorization, _callback);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRiskScore
     * @param getRiskScoreRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskScoreCall(GetRiskScoreRequest getRiskScoreRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getRiskScoreRequest;

        // create path and map variables
        String localVarPath = "/api/2/risk/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRiskScoreValidateBeforeCall(GetRiskScoreRequest getRiskScoreRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'getRiskScoreRequest' is set
        if (getRiskScoreRequest == null) {
            throw new ApiException("Missing the required parameter 'getRiskScoreRequest' when calling getRiskScore(Async)");
        }
        

        okhttp3.Call localVarCall = getRiskScoreCall(getRiskScoreRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param getRiskScoreRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GetRiskScore200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public GetRiskScore200Response getRiskScore(GetRiskScoreRequest getRiskScoreRequest, String authorization) throws ApiException {
        ApiResponse<GetRiskScore200Response> localVarResp = getRiskScoreWithHttpInfo(getRiskScoreRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param getRiskScoreRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GetRiskScore200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRiskScore200Response> getRiskScoreWithHttpInfo(GetRiskScoreRequest getRiskScoreRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRiskScoreValidateBeforeCall(getRiskScoreRequest, authorization, null);
        Type localVarReturnType = new TypeToken<GetRiskScore200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param getRiskScoreRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRiskScoreAsync(GetRiskScoreRequest getRiskScoreRequest, String authorization, final ApiCallback<GetRiskScore200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRiskScoreValidateBeforeCall(getRiskScoreRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<GetRiskScore200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(Integer roleId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(Integer roleId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRole(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleCall(roleId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Role getRole(Integer roleId, String authorization) throws ApiException {
        ApiResponse<Role> localVarResp = getRoleWithHttpInfo(roleId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getRoleWithHttpInfo(Integer roleId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(roleId, authorization, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(Integer roleId, String authorization, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(roleId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleAdmins
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAdminsCall(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/admins"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (includeUnassigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unassigned", includeUnassigned));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "applcation/json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleAdminsValidateBeforeCall(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleAdminsCall(roleId, authorization, limit, page, cursor, name, includeUnassigned, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> getRoleAdmins(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = getRoleAdminsWithHttpInfo(roleId, authorization, limit, page, cursor, name, includeUnassigned);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> getRoleAdminsWithHttpInfo(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        okhttp3.Call localVarCall = getRoleAdminsValidateBeforeCall(roleId, authorization, limit, page, cursor, name, includeUnassigned, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAdminsAsync(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleAdminsValidateBeforeCall(roleId, authorization, limit, page, cursor, name, includeUnassigned, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleApps
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAppsCall(Integer roleId, String authorization, Integer limit, Integer page, String cursor, Boolean assigned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/apps"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (assigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assigned", assigned));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "applcation/json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleAppsValidateBeforeCall(Integer roleId, String authorization, Integer limit, Integer page, String cursor, Boolean assigned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleApps(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleAppsCall(roleId, authorization, limit, page, cursor, assigned, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @return List&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema> getRoleApps(Integer roleId, String authorization, Integer limit, Integer page, String cursor, Boolean assigned) throws ApiException {
        ApiResponse<List<Schema>> localVarResp = getRoleAppsWithHttpInfo(roleId, authorization, limit, page, cursor, assigned);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @return ApiResponse&lt;List&lt;Schema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema>> getRoleAppsWithHttpInfo(Integer roleId, String authorization, Integer limit, Integer page, String cursor, Boolean assigned) throws ApiException {
        okhttp3.Call localVarCall = getRoleAppsValidateBeforeCall(roleId, authorization, limit, page, cursor, assigned, null);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param assigned Optional. Defaults to true. Returns all apps not yet assigned to the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAppsAsync(Integer roleId, String authorization, Integer limit, Integer page, String cursor, Boolean assigned, final ApiCallback<List<Schema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleAppsValidateBeforeCall(roleId, authorization, limit, page, cursor, assigned, _callback);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRoleUsers
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleUsersCall(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/users"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (includeUnassigned != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_unassigned", includeUnassigned));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "applcation/json", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleUsersValidateBeforeCall(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getRoleUsers(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleUsersCall(roleId, authorization, limit, page, cursor, name, includeUnassigned, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return List&lt;Schema1&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema1> getRoleUsers(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        ApiResponse<List<Schema1>> localVarResp = getRoleUsersWithHttpInfo(roleId, authorization, limit, page, cursor, name, includeUnassigned);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @return ApiResponse&lt;List&lt;Schema1&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema1>> getRoleUsersWithHttpInfo(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned) throws ApiException {
        okhttp3.Call localVarCall = getRoleUsersValidateBeforeCall(roleId, authorization, limit, page, cursor, name, includeUnassigned, null);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Allows you to filter on first name, last name, username, and email address. (optional)
     * @param includeUnassigned Optional. Defaults to false. Include users that aren’t assigned to the role. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleUsersAsync(Integer roleId, String authorization, Integer limit, Integer page, String cursor, String name, Boolean includeUnassigned, final ApiCallback<List<Schema1>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleUsersValidateBeforeCall(roleId, authorization, limit, page, cursor, name, includeUnassigned, _callback);
        Type localVarReturnType = new TypeToken<List<Schema1>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRule
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleCall(Integer appId, Integer ruleId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/{rule_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "rule_id" + "\\}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleValidateBeforeCall(Integer appId, Integer ruleId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling getRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling getRule(Async)");
        }
        

        okhttp3.Call localVarCall = getRuleCall(appId, ruleId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Rule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public Rule getRule(Integer appId, Integer ruleId, String authorization) throws ApiException {
        ApiResponse<Rule> localVarResp = getRuleWithHttpInfo(appId, ruleId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Rule> getRuleWithHttpInfo(Integer appId, Integer ruleId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getRuleValidateBeforeCall(appId, ruleId, authorization, null);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleAsync(Integer appId, Integer ruleId, String authorization, final ApiCallback<Rule> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleValidateBeforeCall(appId, ruleId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Rule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getScoreInsights
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreInsightsCall(String authorization, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/scores";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScoreInsightsValidateBeforeCall(String authorization, String before, String after, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getScoreInsightsCall(authorization, before, after, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @return GetScoreInsights200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public GetScoreInsights200Response getScoreInsights(String authorization, String before, String after) throws ApiException {
        ApiResponse<GetScoreInsights200Response> localVarResp = getScoreInsightsWithHttpInfo(authorization, before, after);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @return ApiResponse&lt;GetScoreInsights200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetScoreInsights200Response> getScoreInsightsWithHttpInfo(String authorization, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = getScoreInsightsValidateBeforeCall(authorization, before, after, null);
        Type localVarReturnType = new TypeToken<GetScoreInsights200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago. (optional)
     * @param after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid Access Token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getScoreInsightsAsync(String authorization, String before, String after, final ApiCallback<GetScoreInsights200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScoreInsightsValidateBeforeCall(authorization, before, after, _callback);
        Type localVarReturnType = new TypeToken<GetScoreInsights200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(Integer userId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUser(Async)");
        }
        

        okhttp3.Call localVarCall = getUserCall(userId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(Integer userId, String authorization) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(userId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(Integer userId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, authorization, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(Integer userId, String authorization, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(userId, authorization, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserApps
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAppsCall(Integer userId, String authorization, Boolean ignoreVisibility, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}/apps"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ignoreVisibility != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ignore_visibility", ignoreVisibility));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAppsValidateBeforeCall(Integer userId, String authorization, Boolean ignoreVisibility, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getUserApps(Async)");
        }
        

        okhttp3.Call localVarCall = getUserAppsCall(userId, authorization, ignoreVisibility, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @return List&lt;GetUserApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<GetUserApps200ResponseInner> getUserApps(Integer userId, String authorization, Boolean ignoreVisibility) throws ApiException {
        ApiResponse<List<GetUserApps200ResponseInner>> localVarResp = getUserAppsWithHttpInfo(userId, authorization, ignoreVisibility);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @return ApiResponse&lt;List&lt;GetUserApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GetUserApps200ResponseInner>> getUserAppsWithHttpInfo(Integer userId, String authorization, Boolean ignoreVisibility) throws ApiException {
        okhttp3.Call localVarCall = getUserAppsValidateBeforeCall(userId, authorization, ignoreVisibility, null);
        Type localVarReturnType = new TypeToken<List<GetUserApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param ignoreVisibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAppsAsync(Integer userId, String authorization, Boolean ignoreVisibility, final ApiCallback<List<GetUserApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAppsValidateBeforeCall(userId, authorization, ignoreVisibility, _callback);
        Type localVarReturnType = new TypeToken<List<GetUserApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAccessTokenClaims
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccessTokenClaimsCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessTokenClaimsValidateBeforeCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listAccessTokenClaims(Async)");
        }
        

        okhttp3.Call localVarCall = listAccessTokenClaimsCall(id, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListAccessTokenClaims200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAccessTokenClaims200ResponseInner> listAccessTokenClaims(Integer id, String authorization) throws ApiException {
        ApiResponse<List<ListAccessTokenClaims200ResponseInner>> localVarResp = listAccessTokenClaimsWithHttpInfo(id, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListAccessTokenClaims200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAccessTokenClaims200ResponseInner>> listAccessTokenClaimsWithHttpInfo(Integer id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listAccessTokenClaimsValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListAccessTokenClaims200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAccessTokenClaimsAsync(Integer id, String authorization, final ApiCallback<List<ListAccessTokenClaims200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessTokenClaimsValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListAccessTokenClaims200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActionValues
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionValuesCall(Integer appId, String actionValue, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/actions/{action_value}/values"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "action_value" + "\\}", localVarApiClient.escapeString(actionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionValuesValidateBeforeCall(Integer appId, String actionValue, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listActionValues(Async)");
        }
        
        // verify the required parameter 'actionValue' is set
        if (actionValue == null) {
            throw new ApiException("Missing the required parameter 'actionValue' when calling listActionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listActionValuesCall(appId, actionValue, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listActionValues(Integer appId, String actionValue, String authorization) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listActionValuesWithHttpInfo(appId, actionValue, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listActionValuesWithHttpInfo(Integer appId, String actionValue, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listActionValuesValidateBeforeCall(appId, actionValue, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionValuesAsync(Integer appId, String actionValue, String authorization, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionValuesValidateBeforeCall(appId, actionValue, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActions
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionsCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/actions"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActionsValidateBeforeCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listActions(Async)");
        }
        

        okhttp3.Call localVarCall = listActionsCall(appId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListActions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListActions200ResponseInner> listActions(Integer appId, String authorization) throws ApiException {
        ApiResponse<List<ListActions200ResponseInner>> localVarResp = listActionsWithHttpInfo(appId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListActions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListActions200ResponseInner>> listActionsWithHttpInfo(Integer appId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listActionsValidateBeforeCall(appId, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listActionsAsync(Integer appId, String authorization, final ApiCallback<List<ListActions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActionsValidateBeforeCall(appId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAppUsers
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppUsersCall(Integer appId, String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/users"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppUsersValidateBeforeCall(Integer appId, String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listAppUsers(Async)");
        }
        

        okhttp3.Call localVarCall = listAppUsersCall(appId, authorization, limit, page, cursor, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return List&lt;ListAppUsers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAppUsers200ResponseInner> listAppUsers(Integer appId, String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        ApiResponse<List<ListAppUsers200ResponseInner>> localVarResp = listAppUsersWithHttpInfo(appId, authorization, limit, page, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return ApiResponse&lt;List&lt;ListAppUsers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAppUsers200ResponseInner>> listAppUsersWithHttpInfo(Integer appId, String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listAppUsersValidateBeforeCall(appId, authorization, limit, page, cursor, null);
        Type localVarReturnType = new TypeToken<List<ListAppUsers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppUsersAsync(Integer appId, String authorization, Integer limit, Integer page, String cursor, final ApiCallback<List<ListAppUsers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppUsersValidateBeforeCall(appId, authorization, limit, page, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<ListAppUsers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listApps
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppsCall(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (connectorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connector_id", connectorId));
        }

        if (authMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_method", authMethod));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAppsValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAppsCall(authorization, limit, page, cursor, name, connectorId, authMethod, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @return List&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Schema> listApps(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod) throws ApiException {
        ApiResponse<List<Schema>> localVarResp = listAppsWithHttpInfo(authorization, limit, page, cursor, name, connectorId, authMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @return ApiResponse&lt;List&lt;Schema&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Schema>> listAppsWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod) throws ApiException {
        okhttp3.Call localVarCall = listAppsValidateBeforeCall(authorization, limit, page, cursor, name, connectorId, authMethod, null);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param connectorId Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs. (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAppsAsync(String authorization, Integer limit, Integer page, String cursor, String name, Integer connectorId, AuthMethod authMethod, final ApiCallback<List<Schema>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAppsValidateBeforeCall(authorization, limit, page, cursor, name, connectorId, authMethod, _callback);
        Type localVarReturnType = new TypeToken<List<Schema>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAuthorizationServers
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorizationServersCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuthorizationServersValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listAuthorizationServersCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListAuthorizationServers200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListAuthorizationServers200ResponseInner> listAuthorizationServers(String authorization) throws ApiException {
        ApiResponse<List<ListAuthorizationServers200ResponseInner>> localVarResp = listAuthorizationServersWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListAuthorizationServers200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListAuthorizationServers200ResponseInner>> listAuthorizationServersWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listAuthorizationServersValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ListAuthorizationServers200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthorizationServersAsync(String authorization, final ApiCallback<List<ListAuthorizationServers200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuthorizationServersValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListAuthorizationServers200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConditionOperators
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionOperatorsCall(Integer appId, String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/conditions/{condition_value}/operators"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConditionOperatorsValidateBeforeCall(Integer appId, String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listConditionOperators(Async)");
        }
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listConditionOperators(Async)");
        }
        

        okhttp3.Call localVarCall = listConditionOperatorsCall(appId, conditionValue, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListConditionOperators200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionOperators200ResponseInner> listConditionOperators(Integer appId, String conditionValue, String authorization) throws ApiException {
        ApiResponse<List<ListConditionOperators200ResponseInner>> localVarResp = listConditionOperatorsWithHttpInfo(appId, conditionValue, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListConditionOperators200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionOperators200ResponseInner>> listConditionOperatorsWithHttpInfo(Integer appId, String conditionValue, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listConditionOperatorsValidateBeforeCall(appId, conditionValue, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListConditionOperators200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionOperatorsAsync(Integer appId, String conditionValue, String authorization, final ApiCallback<List<ListConditionOperators200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConditionOperatorsValidateBeforeCall(appId, conditionValue, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionOperators200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConditionValues
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionValuesCall(Integer appId, String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/conditions/{condition_value}/values"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConditionValuesValidateBeforeCall(Integer appId, String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listConditionValues(Async)");
        }
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listConditionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listConditionValuesCall(appId, conditionValue, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listConditionValues(Integer appId, String conditionValue, String authorization) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listConditionValuesWithHttpInfo(appId, conditionValue, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listConditionValuesWithHttpInfo(Integer appId, String conditionValue, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listConditionValuesValidateBeforeCall(appId, conditionValue, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionValuesAsync(Integer appId, String conditionValue, String authorization, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConditionValuesValidateBeforeCall(appId, conditionValue, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConditions
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionsCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/conditions"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConditionsValidateBeforeCall(Integer appId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listConditions(Async)");
        }
        

        okhttp3.Call localVarCall = listConditionsCall(appId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListConditions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditions200ResponseInner> listConditions(Integer appId, String authorization) throws ApiException {
        ApiResponse<List<ListConditions200ResponseInner>> localVarResp = listConditionsWithHttpInfo(appId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListConditions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditions200ResponseInner>> listConditionsWithHttpInfo(Integer appId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listConditionsValidateBeforeCall(appId, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListConditions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConditionsAsync(Integer appId, String authorization, final ApiCallback<List<ListConditions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConditionsValidateBeforeCall(appId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listConnectors
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectorsCall(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (authMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auth_method", authMethod));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConnectorsValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listConnectorsCall(authorization, limit, page, cursor, name, authMethod, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @return List&lt;Connector&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Connector> listConnectors(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod) throws ApiException {
        ApiResponse<List<Connector>> localVarResp = listConnectorsWithHttpInfo(authorization, limit, page, cursor, name, authMethod);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @return ApiResponse&lt;List&lt;Connector&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Connector>> listConnectorsWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod) throws ApiException {
        okhttp3.Call localVarCall = listConnectorsValidateBeforeCall(authorization, limit, page, cursor, name, authMethod, null);
        Type localVarReturnType = new TypeToken<List<Connector>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60; (optional)
     * @param authMethod Returns all apps based of a given type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listConnectorsAsync(String authorization, Integer limit, Integer page, String cursor, String name, AuthMethod authMethod, final ApiCallback<List<Connector>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConnectorsValidateBeforeCall(authorization, limit, page, cursor, name, authMethod, _callback);
        Type localVarReturnType = new TypeToken<List<Connector>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEnvironmentVariables
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEnvironmentVariablesCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEnvironmentVariablesValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listEnvironmentVariablesCall(authorization, limit, page, cursor, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return List&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Envvar> listEnvironmentVariables(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        ApiResponse<List<Envvar>> localVarResp = listEnvironmentVariablesWithHttpInfo(authorization, limit, page, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return ApiResponse&lt;List&lt;Envvar&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Envvar>> listEnvironmentVariablesWithHttpInfo(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listEnvironmentVariablesValidateBeforeCall(authorization, limit, page, cursor, null);
        Type localVarReturnType = new TypeToken<List<Envvar>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEnvironmentVariablesAsync(String authorization, Integer limit, Integer page, String cursor, final ApiCallback<List<Envvar>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEnvironmentVariablesValidateBeforeCall(authorization, limit, page, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<Envvar>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listHooks
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHooksCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/hooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listHooksValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listHooksCall(authorization, limit, page, cursor, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return List&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Hook> listHooks(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        ApiResponse<List<Hook>> localVarResp = listHooksWithHttpInfo(authorization, limit, page, cursor);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @return ApiResponse&lt;List&lt;Hook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Hook>> listHooksWithHttpInfo(String authorization, Integer limit, Integer page, String cursor) throws ApiException {
        okhttp3.Call localVarCall = listHooksValidateBeforeCall(authorization, limit, page, cursor, null);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listHooksAsync(String authorization, Integer limit, Integer page, String cursor, final ApiCallback<List<Hook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listHooksValidateBeforeCall(authorization, limit, page, cursor, _callback);
        Type localVarReturnType = new TypeToken<List<Hook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingActionValues
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionValuesCall(String actionValue, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/actions/{action_value}/values"
            .replaceAll("\\{" + "action_value" + "\\}", localVarApiClient.escapeString(actionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingActionValuesValidateBeforeCall(String actionValue, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'actionValue' is set
        if (actionValue == null) {
            throw new ApiException("Missing the required parameter 'actionValue' when calling listMappingActionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingActionValuesCall(actionValue, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listMappingActionValues(String actionValue, String authorization) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listMappingActionValuesWithHttpInfo(actionValue, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listMappingActionValuesWithHttpInfo(String actionValue, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingActionValuesValidateBeforeCall(actionValue, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param actionValue The value for the selected action. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionValuesAsync(String actionValue, String authorization, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingActionValuesValidateBeforeCall(actionValue, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingActions
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/actions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingActionsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMappingActionsCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListActions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListActions200ResponseInner> listMappingActions(String authorization) throws ApiException {
        ApiResponse<List<ListActions200ResponseInner>> localVarResp = listMappingActionsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListActions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListActions200ResponseInner>> listMappingActionsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingActionsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingActionsAsync(String authorization, final ApiCallback<List<ListActions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingActionsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListActions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingConditionOperators
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionOperatorsCall(String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/conditions/{condition_value}/operators"
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingConditionOperatorsValidateBeforeCall(String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listMappingConditionOperators(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingConditionOperatorsCall(conditionValue, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListMappingConditionOperators200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListMappingConditionOperators200ResponseInner> listMappingConditionOperators(String conditionValue, String authorization) throws ApiException {
        ApiResponse<List<ListMappingConditionOperators200ResponseInner>> localVarResp = listMappingConditionOperatorsWithHttpInfo(conditionValue, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListMappingConditionOperators200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListMappingConditionOperators200ResponseInner>> listMappingConditionOperatorsWithHttpInfo(String conditionValue, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingConditionOperatorsValidateBeforeCall(conditionValue, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListMappingConditionOperators200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionOperatorsAsync(String conditionValue, String authorization, final ApiCallback<List<ListMappingConditionOperators200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingConditionOperatorsValidateBeforeCall(conditionValue, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListMappingConditionOperators200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingConditionValues
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionValuesCall(String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/conditions/{condition_value}/values"
            .replaceAll("\\{" + "condition_value" + "\\}", localVarApiClient.escapeString(conditionValue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingConditionValuesValidateBeforeCall(String conditionValue, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'conditionValue' is set
        if (conditionValue == null) {
            throw new ApiException("Missing the required parameter 'conditionValue' when calling listMappingConditionValues(Async)");
        }
        

        okhttp3.Call localVarCall = listMappingConditionValuesCall(conditionValue, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListConditionValues200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListConditionValues200ResponseInner> listMappingConditionValues(String conditionValue, String authorization) throws ApiException {
        ApiResponse<List<ListConditionValues200ResponseInner>> localVarResp = listMappingConditionValuesWithHttpInfo(conditionValue, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListConditionValues200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListConditionValues200ResponseInner>> listMappingConditionValuesWithHttpInfo(String conditionValue, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingConditionValuesValidateBeforeCall(conditionValue, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param conditionValue The value for the selected condition. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionValuesAsync(String conditionValue, String authorization, final ApiCallback<List<ListConditionValues200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingConditionValuesValidateBeforeCall(conditionValue, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListConditionValues200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappingConditions
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionsCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/mappings/conditions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingConditionsValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMappingConditionsCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListMappingConditions200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<ListMappingConditions200ResponseInner> listMappingConditions(String authorization) throws ApiException {
        ApiResponse<List<ListMappingConditions200ResponseInner>> localVarResp = listMappingConditionsWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListMappingConditions200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListMappingConditions200ResponseInner>> listMappingConditionsWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listMappingConditionsValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<ListMappingConditions200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingConditionsAsync(String authorization, final ApiCallback<List<ListMappingConditions200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingConditionsValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListMappingConditions200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listMappings
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingsCall(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (hasCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition", hasCondition));
        }

        if (hasConditionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition_type", hasConditionType));
        }

        if (hasAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action", hasAction));
        }

        if (hasActionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action_type", hasActionType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listMappingsValidateBeforeCall(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listMappingsCall(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @return List&lt;Mapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Mapping> listMappings(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        ApiResponse<List<Mapping>> localVarResp = listMappingsWithHttpInfo(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @return ApiResponse&lt;List&lt;Mapping&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Mapping>> listMappingsWithHttpInfo(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        okhttp3.Call localVarCall = listMappingsValidateBeforeCall(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, null);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listMappingsAsync(String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback<List<Mapping>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listMappingsValidateBeforeCall(authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        Type localVarReturnType = new TypeToken<List<Mapping>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRiskRules
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRiskRulesCall(String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRiskRulesValidateBeforeCall(String authorization, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRiskRulesCall(authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public List<RiskRule> listRiskRules(String authorization) throws ApiException {
        ApiResponse<List<RiskRule>> localVarResp = listRiskRulesWithHttpInfo(authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;RiskRule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RiskRule>> listRiskRulesWithHttpInfo(String authorization) throws ApiException {
        okhttp3.Call localVarCall = listRiskRulesValidateBeforeCall(authorization, null);
        Type localVarReturnType = new TypeToken<List<RiskRule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRiskRulesAsync(String authorization, final ApiCallback<List<RiskRule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRiskRulesValidateBeforeCall(authorization, _callback);
        Type localVarReturnType = new TypeToken<List<RiskRule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoles
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesCall(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (appId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("app_id", appId));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRolesValidateBeforeCall(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listRolesCall(authorization, limit, page, cursor, name, appId, fields, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return List&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Role> listRoles(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields) throws ApiException {
        ApiResponse<List<Role>> localVarResp = listRolesWithHttpInfo(authorization, limit, page, cursor, name, appId, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return ApiResponse&lt;List&lt;Role&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Role>> listRolesWithHttpInfo(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields) throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(authorization, limit, page, cursor, name, appId, fields, null);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param name Optional. Filters by role name. (optional)
     * @param appId Optional. Returns roles that contain this app name. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesAsync(String authorization, Integer limit, Integer page, String cursor, String name, String appId, String fields, final ApiCallback<List<Role>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRolesValidateBeforeCall(authorization, limit, page, cursor, name, appId, fields, _callback);
        Type localVarReturnType = new TypeToken<List<Role>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRules
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRulesCall(Integer appId, String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enabled != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enabled", enabled));
        }

        if (hasCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition", hasCondition));
        }

        if (hasConditionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_condition_type", hasConditionType));
        }

        if (hasAction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action", hasAction));
        }

        if (hasActionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_action_type", hasActionType));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRulesValidateBeforeCall(Integer appId, String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listRules(Async)");
        }
        

        okhttp3.Call localVarCall = listRulesCall(appId, authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @return List&lt;Rule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Rule> listRules(Integer appId, String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        ApiResponse<List<Rule>> localVarResp = listRulesWithHttpInfo(appId, authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @return ApiResponse&lt;List&lt;Rule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Rule>> listRulesWithHttpInfo(Integer appId, String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType) throws ApiException {
        okhttp3.Call localVarCall = listRulesValidateBeforeCall(appId, authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, null);
        Type localVarReturnType = new TypeToken<List<Rule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules. (optional)
     * @param hasCondition Filters Rules based on their Conditions. (optional)
     * @param hasConditionType Filters Rules based on their condition types. (optional)
     * @param hasAction Filters Rules based on their Actions. (optional)
     * @param hasActionType Filters Rules based on their action types. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRulesAsync(Integer appId, String authorization, Boolean enabled, String hasCondition, String hasConditionType, String hasAction, String hasActionType, final ApiCallback<List<Rule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRulesValidateBeforeCall(appId, authorization, enabled, hasCondition, hasConditionType, hasAction, hasActionType, _callback);
        Type localVarReturnType = new TypeToken<List<Rule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listScopes
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScopesCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScopesValidateBeforeCall(Integer id, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listScopes(Async)");
        }
        

        okhttp3.Call localVarCall = listScopesCall(id, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;ListScopes200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<ListScopes200ResponseInner> listScopes(Integer id, String authorization) throws ApiException {
        ApiResponse<List<ListScopes200ResponseInner>> localVarResp = listScopesWithHttpInfo(id, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;ListScopes200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ListScopes200ResponseInner>> listScopesWithHttpInfo(Integer id, String authorization) throws ApiException {
        okhttp3.Call localVarCall = listScopesValidateBeforeCall(id, authorization, null);
        Type localVarReturnType = new TypeToken<List<ListScopes200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listScopesAsync(Integer id, String authorization, final ApiCallback<List<ListScopes200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScopesValidateBeforeCall(id, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<ListScopes200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listUsers
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersCall(Integer appId, String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/users"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (createdSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_since", createdSince));
        }

        if (createdUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_until", createdUntil));
        }

        if (updatedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_since", updatedSince));
        }

        if (updatedUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("updated_until", updatedUntil));
        }

        if (lastLoginSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_login_since", lastLoginSince));
        }

        if (lastLoginUntil != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last_login_until", lastLoginUntil));
        }

        if (firstname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstname", firstname));
        }

        if (lastname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastname", lastname));
        }

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (samaccountname != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("samaccountname", samaccountname));
        }

        if (directoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("directory_id", directoryId));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (userIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user_ids", userIds));
        }

        if (customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("custom_attributes.{attribute_name}", customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listUsersValidateBeforeCall(Integer appId, String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling listUsers(Async)");
        }
        

        okhttp3.Call localVarCall = listUsersCall(appId, authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return List&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public List<User> listUsers(Integer appId, String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields) throws ApiException {
        ApiResponse<List<User>> localVarResp = listUsersWithHttpInfo(appId, authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @return ApiResponse&lt;List&lt;User&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<User>> listUsersWithHttpInfo(Integer appId, String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields) throws ApiException {
        okhttp3.Call localVarCall = listUsersValidateBeforeCall(appId, authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, null);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit. (optional)
     * @param page The page number of results to return. (optional)
     * @param cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page. (optional)
     * @param createdSince An ISO8601 timestamp value that returns all users created after a given date &amp; time. (optional)
     * @param createdUntil An ISO8601 timestamp value that returns all users created before a given date &amp; time. (optional)
     * @param updatedSince An ISO8601 timestamp value that returns all users updated after a given date &amp; time. (optional)
     * @param updatedUntil An ISO8601 timestamp value that returns all users updated before a given date &amp; time. (optional)
     * @param lastLoginSince An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time. (optional)
     * @param lastLoginUntil An ISO8601 timestamp value that returns all users that logged in before a given date &amp; time. (optional)
     * @param firstname The first name of the user (optional)
     * @param lastname The last name of the user (optional)
     * @param email The email address of the user (optional)
     * @param username The username for the user (optional)
     * @param samaccountname The AD login name for the user (optional)
     * @param directoryId The ID in OneLogin of the Directory that the user belongs to (optional)
     * @param externalId An external identifier that has been set on the user (optional)
     * @param userIds A comma separated list of OneLogin User IDs (optional)
     * @param customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes. (optional)
     * @param fields Optional. Comma delimited list of fields to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Current-Page -  <br>  * Page-Items -  <br>  * Total-Count -  <br>  * Total-Pages -  <br>  * Link -  <br>  * Before-Cursor -  <br>  * After-Cursor -  <br>  </td></tr>
        <tr><td> 400 </td><td> An invalid search parameter was used. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You cant sort on this field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listUsersAsync(Integer appId, String authorization, Integer limit, Integer page, String cursor, String createdSince, String createdUntil, String updatedSince, String updatedUntil, String lastLoginSince, String lastLoginUntil, String firstname, String lastname, String email, String username, String samaccountname, String directoryId, String externalId, String userIds, String customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, String fields, final ApiCallback<List<User>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listUsersValidateBeforeCall(appId, authorization, limit, page, cursor, createdSince, createdUntil, updatedSince, updatedUntil, lastLoginSince, lastLoginUntil, firstname, lastname, email, username, samaccountname, directoryId, externalId, userIds, customAttributesLeftCurlyBracketAttributeNameRightCurlyBracket, fields, _callback);
        Type localVarReturnType = new TypeToken<List<User>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeClientApp
     * @param id  (required)
     * @param clientAppId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeClientAppCall(Integer id, Integer clientAppId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients/{client_app_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "client_app_id" + "\\}", localVarApiClient.escapeString(clientAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeClientAppValidateBeforeCall(Integer id, Integer clientAppId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeClientApp(Async)");
        }
        
        // verify the required parameter 'clientAppId' is set
        if (clientAppId == null) {
            throw new ApiException("Missing the required parameter 'clientAppId' when calling removeClientApp(Async)");
        }
        

        okhttp3.Call localVarCall = removeClientAppCall(id, clientAppId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clientAppId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public void removeClientApp(Integer id, Integer clientAppId, String authorization) throws ApiException {
        removeClientAppWithHttpInfo(id, clientAppId, authorization);
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clientAppId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeClientAppWithHttpInfo(Integer id, Integer clientAppId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeClientAppValidateBeforeCall(id, clientAppId, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param clientAppId  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeClientAppAsync(Integer id, Integer clientAppId, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeClientAppValidateBeforeCall(id, clientAppId, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRoleAdmins
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleAdminsCall(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeRoleUsersRequest;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/admins"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRoleAdminsValidateBeforeCall(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeRoleAdmins(Async)");
        }
        
        // verify the required parameter 'removeRoleUsersRequest' is set
        if (removeRoleUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'removeRoleUsersRequest' when calling removeRoleAdmins(Async)");
        }
        

        okhttp3.Call localVarCall = removeRoleAdminsCall(roleId, removeRoleUsersRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void removeRoleAdmins(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization) throws ApiException {
        removeRoleAdminsWithHttpInfo(roleId, removeRoleUsersRequest, authorization);
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeRoleAdminsWithHttpInfo(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeRoleAdminsValidateBeforeCall(roleId, removeRoleUsersRequest, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleAdminsAsync(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRoleAdminsValidateBeforeCall(roleId, removeRoleUsersRequest, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeRoleUsers
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleUsersCall(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeRoleUsersRequest;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/users"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeRoleUsersValidateBeforeCall(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeRoleUsers(Async)");
        }
        
        // verify the required parameter 'removeRoleUsersRequest' is set
        if (removeRoleUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'removeRoleUsersRequest' when calling removeRoleUsers(Async)");
        }
        

        okhttp3.Call localVarCall = removeRoleUsersCall(roleId, removeRoleUsersRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public void removeRoleUsers(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization) throws ApiException {
        removeRoleUsersWithHttpInfo(roleId, removeRoleUsersRequest, authorization);
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeRoleUsersWithHttpInfo(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeRoleUsersValidateBeforeCall(roleId, removeRoleUsersRequest, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param removeRoleUsersRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NO CONTENT </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeRoleUsersAsync(Integer roleId, RemoveRoleUsersRequest removeRoleUsersRequest, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeRoleUsersValidateBeforeCall(roleId, removeRoleUsersRequest, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokeToken
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeTokenCall(String authorization, RevokeTokenRequest revokeTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = revokeTokenRequest;

        // create path and map variables
        String localVarPath = "/auth/oauth2/revoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeTokenValidateBeforeCall(String authorization, RevokeTokenRequest revokeTokenRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling revokeToken(Async)");
        }
        

        okhttp3.Call localVarCall = revokeTokenCall(authorization, revokeTokenRequest, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @return GenerateToken400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public GenerateToken400Response revokeToken(String authorization, RevokeTokenRequest revokeTokenRequest) throws ApiException {
        ApiResponse<GenerateToken400Response> localVarResp = revokeTokenWithHttpInfo(authorization, revokeTokenRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @return ApiResponse&lt;GenerateToken400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateToken400Response> revokeTokenWithHttpInfo(String authorization, RevokeTokenRequest revokeTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(authorization, revokeTokenRequest, null);
        Type localVarReturnType = new TypeToken<GenerateToken400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization  (required)
     * @param revokeTokenRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Possibly, the Authorization header is incorrectly formatted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your client_id and/or client_secret values are invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Typically, this error means that you are using the incorrect method. Ensure that you are making a POST. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokeTokenAsync(String authorization, RevokeTokenRequest revokeTokenRequest, final ApiCallback<GenerateToken400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeTokenValidateBeforeCall(authorization, revokeTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<GenerateToken400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRoleApps
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleAppsCall(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}/apps"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRoleAppsValidateBeforeCall(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling setRoleApps(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling setRoleApps(Async)");
        }
        

        okhttp3.Call localVarCall = setRoleAppsCall(roleId, requestBody, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;SetRoleApps200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<SetRoleApps200ResponseInner> setRoleApps(Integer roleId, List<Integer> requestBody, String authorization) throws ApiException {
        ApiResponse<List<SetRoleApps200ResponseInner>> localVarResp = setRoleAppsWithHttpInfo(roleId, requestBody, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;SetRoleApps200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SetRoleApps200ResponseInner>> setRoleAppsWithHttpInfo(Integer roleId, List<Integer> requestBody, String authorization) throws ApiException {
        okhttp3.Call localVarCall = setRoleAppsValidateBeforeCall(roleId, requestBody, authorization, null);
        Type localVarReturnType = new TypeToken<List<SetRoleApps200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param requestBody  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response returns an array of app IDs sent in the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleAppsAsync(Integer roleId, List<Integer> requestBody, String authorization, final ApiCallback<List<SetRoleApps200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRoleAppsValidateBeforeCall(roleId, requestBody, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<SetRoleApps200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trackEvent
     * @param trackEventRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackEventCall(TrackEventRequest trackEventRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trackEventRequest;

        // create path and map variables
        String localVarPath = "/api/2/risk/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trackEventValidateBeforeCall(TrackEventRequest trackEventRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'trackEventRequest' is set
        if (trackEventRequest == null) {
            throw new ApiException("Missing the required parameter 'trackEventRequest' when calling trackEvent(Async)");
        }
        

        okhttp3.Call localVarCall = trackEventCall(trackEventRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param trackEventRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public void trackEvent(TrackEventRequest trackEventRequest, String authorization) throws ApiException {
        trackEventWithHttpInfo(trackEventRequest, authorization);
    }

    /**
     * 
     * 
     * @param trackEventRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> trackEventWithHttpInfo(TrackEventRequest trackEventRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = trackEventValidateBeforeCall(trackEventRequest, authorization, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param trackEventRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> No content is returned. This API is fire and forget. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API Key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trackEventAsync(TrackEventRequest trackEventRequest, String authorization, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = trackEventValidateBeforeCall(trackEventRequest, authorization, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccessTokenClaim
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessTokenClaimCall(Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addAccessTokenClaimRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/claims/{claim_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "claim_id" + "\\}", localVarApiClient.escapeString(claimId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccessTokenClaimValidateBeforeCall(Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'claimId' is set
        if (claimId == null) {
            throw new ApiException("Missing the required parameter 'claimId' when calling updateAccessTokenClaim(Async)");
        }
        
        // verify the required parameter 'addAccessTokenClaimRequest' is set
        if (addAccessTokenClaimRequest == null) {
            throw new ApiException("Missing the required parameter 'addAccessTokenClaimRequest' when calling updateAccessTokenClaim(Async)");
        }
        

        okhttp3.Call localVarCall = updateAccessTokenClaimCall(id, claimId, addAccessTokenClaimRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id updateAccessTokenClaim(Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization) throws ApiException {
        ApiResponse<Id> localVarResp = updateAccessTokenClaimWithHttpInfo(id, claimId, addAccessTokenClaimRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> updateAccessTokenClaimWithHttpInfo(Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateAccessTokenClaimValidateBeforeCall(id, claimId, addAccessTokenClaimRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param claimId  (required)
     * @param addAccessTokenClaimRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccessTokenClaimAsync(Integer id, Integer claimId, AddAccessTokenClaimRequest addAccessTokenClaimRequest, String authorization, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccessTokenClaimValidateBeforeCall(id, claimId, addAccessTokenClaimRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateApp
     * @param appId  (required)
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAppCall(Integer appId, Schema schema, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schema;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAppValidateBeforeCall(Integer appId, Schema schema, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateApp(Async)");
        }
        
        // verify the required parameter 'schema' is set
        if (schema == null) {
            throw new ApiException("Missing the required parameter 'schema' when calling updateApp(Async)");
        }
        

        okhttp3.Call localVarCall = updateAppCall(appId, schema, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Schema
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Schema updateApp(Integer appId, Schema schema, String authorization) throws ApiException {
        ApiResponse<Schema> localVarResp = updateAppWithHttpInfo(appId, schema, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Schema&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schema> updateAppWithHttpInfo(Integer appId, Schema schema, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateAppValidateBeforeCall(appId, schema, authorization, null);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param schema  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAppAsync(Integer appId, Schema schema, String authorization, final ApiCallback<Schema> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAppValidateBeforeCall(appId, schema, authorization, _callback);
        Type localVarReturnType = new TypeToken<Schema>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAuthorizationServer
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthorizationServerCall(Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAuthorizationServerRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAuthorizationServerValidateBeforeCall(Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateAuthorizationServer(Async)");
        }
        
        // verify the required parameter 'createAuthorizationServerRequest' is set
        if (createAuthorizationServerRequest == null) {
            throw new ApiException("Missing the required parameter 'createAuthorizationServerRequest' when calling updateAuthorizationServer(Async)");
        }
        

        okhttp3.Call localVarCall = updateAuthorizationServerCall(id, createAuthorizationServerRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public Id updateAuthorizationServer(Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization) throws ApiException {
        ApiResponse<Id> localVarResp = updateAuthorizationServerWithHttpInfo(id, createAuthorizationServerRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> updateAuthorizationServerWithHttpInfo(Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateAuthorizationServerValidateBeforeCall(id, createAuthorizationServerRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param createAuthorizationServerRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> You need to submit all of the attributes </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAuthorizationServerAsync(Integer id, CreateAuthorizationServerRequest createAuthorizationServerRequest, String authorization, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAuthorizationServerValidateBeforeCall(id, createAuthorizationServerRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateClientApp
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientAppCall(Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateClientAppRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/clients/{client_app_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "client_app_id" + "\\}", localVarApiClient.escapeString(clientAppId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateClientAppValidateBeforeCall(Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateClientApp(Async)");
        }
        
        // verify the required parameter 'clientAppId' is set
        if (clientAppId == null) {
            throw new ApiException("Missing the required parameter 'clientAppId' when calling updateClientApp(Async)");
        }
        
        // verify the required parameter 'updateClientAppRequest' is set
        if (updateClientAppRequest == null) {
            throw new ApiException("Missing the required parameter 'updateClientAppRequest' when calling updateClientApp(Async)");
        }
        

        okhttp3.Call localVarCall = updateClientAppCall(id, clientAppId, updateClientAppRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ClientApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ClientApp updateClientApp(Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, String authorization) throws ApiException {
        ApiResponse<ClientApp> localVarResp = updateClientAppWithHttpInfo(id, clientAppId, updateClientAppRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;ClientApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ClientApp> updateClientAppWithHttpInfo(Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateClientAppValidateBeforeCall(id, clientAppId, updateClientAppRequest, authorization, null);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param clientAppId  (required)
     * @param updateClientAppRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> An invalid scope id has been provided </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateClientAppAsync(Integer id, Integer clientAppId, UpdateClientAppRequest updateClientAppRequest, String authorization, final ApiCallback<ClientApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateClientAppValidateBeforeCall(id, clientAppId, updateClientAppRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<ClientApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEnvironmentVariable
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvironmentVariableCall(String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateEnvironmentVariableRequest;

        // create path and map variables
        String localVarPath = "/api/2/hooks/envs/{envvar_id}"
            .replaceAll("\\{" + "envvar_id" + "\\}", localVarApiClient.escapeString(envvarId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEnvironmentVariableValidateBeforeCall(String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'envvarId' is set
        if (envvarId == null) {
            throw new ApiException("Missing the required parameter 'envvarId' when calling updateEnvironmentVariable(Async)");
        }
        
        // verify the required parameter 'updateEnvironmentVariableRequest' is set
        if (updateEnvironmentVariableRequest == null) {
            throw new ApiException("Missing the required parameter 'updateEnvironmentVariableRequest' when calling updateEnvironmentVariable(Async)");
        }
        

        okhttp3.Call localVarCall = updateEnvironmentVariableCall(envvarId, updateEnvironmentVariableRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Envvar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public Envvar updateEnvironmentVariable(String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, String authorization) throws ApiException {
        ApiResponse<Envvar> localVarResp = updateEnvironmentVariableWithHttpInfo(envvarId, updateEnvironmentVariableRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Envvar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Envvar> updateEnvironmentVariableWithHttpInfo(String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateEnvironmentVariableValidateBeforeCall(envvarId, updateEnvironmentVariableRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param envvarId Set to the id of the Hook Environment Variable that you want to fetch. (required)
     * @param updateEnvironmentVariableRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> The name of a var can not be changed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEnvironmentVariableAsync(String envvarId, UpdateEnvironmentVariableRequest updateEnvironmentVariableRequest, String authorization, final ApiCallback<Envvar> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEnvironmentVariableValidateBeforeCall(envvarId, updateEnvironmentVariableRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Envvar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateHook
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHookCall(String hookId, Hook hook, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hook;

        // create path and map variables
        String localVarPath = "/api/2/hooks/{hook_id}"
            .replaceAll("\\{" + "hook_id" + "\\}", localVarApiClient.escapeString(hookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateHookValidateBeforeCall(String hookId, Hook hook, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'hookId' is set
        if (hookId == null) {
            throw new ApiException("Missing the required parameter 'hookId' when calling updateHook(Async)");
        }
        
        // verify the required parameter 'hook' is set
        if (hook == null) {
            throw new ApiException("Missing the required parameter 'hook' when calling updateHook(Async)");
        }
        

        okhttp3.Call localVarCall = updateHookCall(hookId, hook, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Hook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public Hook updateHook(String hookId, Hook hook, String authorization) throws ApiException {
        ApiResponse<Hook> localVarResp = updateHookWithHttpInfo(hookId, hook, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Hook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hook> updateHookWithHttpInfo(String hookId, Hook hook, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateHookValidateBeforeCall(hookId, hook, authorization, null);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param hookId Set to the id of the Hook that you want to return. (required)
     * @param hook  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> You function is not base64 encoded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateHookAsync(String hookId, Hook hook, String authorization, final ApiCallback<Hook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateHookValidateBeforeCall(hookId, hook, authorization, _callback);
        Type localVarReturnType = new TypeToken<Hook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateMapping
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMappingCall(Integer mappingId, Mapping mapping, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = mapping;

        // create path and map variables
        String localVarPath = "/api/2/mappings/{mapping_id}"
            .replaceAll("\\{" + "mapping_id" + "\\}", localVarApiClient.escapeString(mappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateMappingValidateBeforeCall(Integer mappingId, Mapping mapping, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mappingId' is set
        if (mappingId == null) {
            throw new ApiException("Missing the required parameter 'mappingId' when calling updateMapping(Async)");
        }
        
        // verify the required parameter 'mapping' is set
        if (mapping == null) {
            throw new ApiException("Missing the required parameter 'mapping' when calling updateMapping(Async)");
        }
        

        okhttp3.Call localVarCall = updateMappingCall(mappingId, mapping, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Integer
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public Integer updateMapping(Integer mappingId, Mapping mapping, String authorization) throws ApiException {
        ApiResponse<Integer> localVarResp = updateMappingWithHttpInfo(mappingId, mapping, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Integer&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Integer> updateMappingWithHttpInfo(Integer mappingId, Mapping mapping, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateMappingValidateBeforeCall(mappingId, mapping, authorization, null);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param mappingId The id of the user mapping to locate. (required)
     * @param mapping  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> UNPROCESSABLE_ENTRY </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateMappingAsync(Integer mappingId, Mapping mapping, String authorization, final ApiCallback<Integer> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateMappingValidateBeforeCall(mappingId, mapping, authorization, _callback);
        Type localVarReturnType = new TypeToken<Integer>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRiskRule
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRiskRuleCall(String riskRuleId, RiskRule riskRule, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskRule;

        // create path and map variables
        String localVarPath = "/api/2/risk/rules/{risk_rule_id}"
            .replaceAll("\\{" + "risk_rule_id" + "\\}", localVarApiClient.escapeString(riskRuleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRiskRuleValidateBeforeCall(String riskRuleId, RiskRule riskRule, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'riskRuleId' is set
        if (riskRuleId == null) {
            throw new ApiException("Missing the required parameter 'riskRuleId' when calling updateRiskRule(Async)");
        }
        
        // verify the required parameter 'riskRule' is set
        if (riskRule == null) {
            throw new ApiException("Missing the required parameter 'riskRule' when calling updateRiskRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateRiskRuleCall(riskRuleId, riskRule, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return RiskRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public RiskRule updateRiskRule(String riskRuleId, RiskRule riskRule, String authorization) throws ApiException {
        ApiResponse<RiskRule> localVarResp = updateRiskRuleWithHttpInfo(riskRuleId, riskRule, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;RiskRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RiskRule> updateRiskRuleWithHttpInfo(String riskRuleId, RiskRule riskRule, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRiskRuleValidateBeforeCall(riskRuleId, riskRule, authorization, null);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param riskRuleId  (required)
     * @param riskRule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRiskRuleAsync(String riskRuleId, RiskRule riskRule, String authorization, final ApiCallback<RiskRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRiskRuleValidateBeforeCall(riskRuleId, riskRule, authorization, _callback);
        Type localVarReturnType = new TypeToken<RiskRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(Integer roleId, Role role, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = role;

        // create path and map variables
        String localVarPath = "/api/2/roles/{role_id}"
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(Integer roleId, Role role, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateRole(Async)");
        }
        
        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling updateRole(Async)");
        }
        

        okhttp3.Call localVarCall = updateRoleCall(roleId, role, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return UpdateRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRole200Response updateRole(Integer roleId, Role role, String authorization) throws ApiException {
        ApiResponse<UpdateRole200Response> localVarResp = updateRoleWithHttpInfo(roleId, role, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;UpdateRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRole200Response> updateRoleWithHttpInfo(Integer roleId, Role role, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(roleId, role, authorization, null);
        Type localVarReturnType = new TypeToken<UpdateRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param roleId Set to the id of the role you want to return. (required)
     * @param role  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(Integer roleId, Role role, String authorization, final ApiCallback<UpdateRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(roleId, role, authorization, _callback);
        Type localVarReturnType = new TypeToken<UpdateRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRule
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleCall(Integer appId, Integer ruleId, Rule rule, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rule;

        // create path and map variables
        String localVarPath = "/api/2/apps/{app_id}/rules/{rule_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "rule_id" + "\\}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRuleValidateBeforeCall(Integer appId, Integer ruleId, Rule rule, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling updateRule(Async)");
        }
        
        // verify the required parameter 'rule' is set
        if (rule == null) {
            throw new ApiException("Missing the required parameter 'rule' when calling updateRule(Async)");
        }
        

        okhttp3.Call localVarCall = updateRuleCall(appId, ruleId, rule, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return RuleId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public RuleId updateRule(Integer appId, Integer ruleId, Rule rule, String authorization) throws ApiException {
        ApiResponse<RuleId> localVarResp = updateRuleWithHttpInfo(appId, ruleId, rule, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;RuleId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleId> updateRuleWithHttpInfo(Integer appId, Integer ruleId, Rule rule, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(appId, ruleId, rule, authorization, null);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param appId  (required)
     * @param ruleId The id of the app rule to locate. (required)
     * @param rule  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> ID should not be included in the payload body. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRuleAsync(Integer appId, Integer ruleId, Rule rule, String authorization, final ApiCallback<RuleId> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRuleValidateBeforeCall(appId, ruleId, rule, authorization, _callback);
        Type localVarReturnType = new TypeToken<RuleId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateScope
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScopeCall(Integer id, Integer scopeId, AddScopeRequest addScopeRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addScopeRequest;

        // create path and map variables
        String localVarPath = "/api/2/api_authorizations/{id}/scopes/{scope_id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "scope_id" + "\\}", localVarApiClient.escapeString(scopeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateScopeValidateBeforeCall(Integer id, Integer scopeId, AddScopeRequest addScopeRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateScope(Async)");
        }
        
        // verify the required parameter 'scopeId' is set
        if (scopeId == null) {
            throw new ApiException("Missing the required parameter 'scopeId' when calling updateScope(Async)");
        }
        
        // verify the required parameter 'addScopeRequest' is set
        if (addScopeRequest == null) {
            throw new ApiException("Missing the required parameter 'addScopeRequest' when calling updateScope(Async)");
        }
        

        okhttp3.Call localVarCall = updateScopeCall(id, scopeId, addScopeRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return Id
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public Id updateScope(Integer id, Integer scopeId, AddScopeRequest addScopeRequest, String authorization) throws ApiException {
        ApiResponse<Id> localVarResp = updateScopeWithHttpInfo(id, scopeId, addScopeRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;Id&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Id> updateScopeWithHttpInfo(Integer id, Integer scopeId, AddScopeRequest addScopeRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = updateScopeValidateBeforeCall(id, scopeId, addScopeRequest, authorization, null);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id  (required)
     * @param scopeId  (required)
     * @param addScopeRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> This name already exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateScopeAsync(Integer id, Integer scopeId, AddScopeRequest addScopeRequest, String authorization, final ApiCallback<Id> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateScopeValidateBeforeCall(id, scopeId, addScopeRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<Id>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUser
     * @param userId Set to the id of the user. (required)
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserCall(Integer userId, User user, String authorization, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/api/2/users/{user_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mappings != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mappings", mappings));
        }

        if (validatePolicy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_policy", validatePolicy));
        }

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserValidateBeforeCall(Integer userId, User user, String authorization, String mappings, Boolean validatePolicy, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateUser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling updateUser(Async)");
        }
        

        okhttp3.Call localVarCall = updateUserCall(userId, user, authorization, mappings, validatePolicy, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public User updateUser(Integer userId, User user, String authorization, String mappings, Boolean validatePolicy) throws ApiException {
        ApiResponse<User> localVarResp = updateUserWithHttpInfo(userId, user, authorization, mappings, validatePolicy);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateUserWithHttpInfo(Integer userId, User user, String authorization, String mappings, Boolean validatePolicy) throws ApiException {
        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, user, authorization, mappings, validatePolicy, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param user  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param mappings Controls how mappings will be applied to the user on creation. Defaults to async. (optional)
     * @param validatePolicy Will passwords validate against the User Policy? Defaults to true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The full user resource is returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Indicates that the syntax of the request is good but a value supplied is not valid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAsync(Integer userId, User user, String authorization, String mappings, Boolean validatePolicy, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserValidateBeforeCall(userId, user, authorization, mappings, validatePolicy, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1VerifyFactor
     * @param v1VerifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1VerifyFactorCall(V1VerifyFactorRequest v1VerifyFactorRequest, String authorization, String customAllowedOriginHeader1, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v1VerifyFactorRequest;

        // create path and map variables
        String localVarPath = "/api/1/login/verify_factor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        if (customAllowedOriginHeader1 != null) {
            localVarHeaderParams.put("Custom-Allowed-Origin-Header-1", localVarApiClient.parameterToString(customAllowedOriginHeader1));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1VerifyFactorValidateBeforeCall(V1VerifyFactorRequest v1VerifyFactorRequest, String authorization, String customAllowedOriginHeader1, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'v1VerifyFactorRequest' is set
        if (v1VerifyFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'v1VerifyFactorRequest' when calling v1VerifyFactor(Async)");
        }
        

        okhttp3.Call localVarCall = v1VerifyFactorCall(v1VerifyFactorRequest, authorization, customAllowedOriginHeader1, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param v1VerifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @return V1VerifyFactor200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public V1VerifyFactor200Response v1VerifyFactor(V1VerifyFactorRequest v1VerifyFactorRequest, String authorization, String customAllowedOriginHeader1) throws ApiException {
        ApiResponse<V1VerifyFactor200Response> localVarResp = v1VerifyFactorWithHttpInfo(v1VerifyFactorRequest, authorization, customAllowedOriginHeader1);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param v1VerifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @return ApiResponse&lt;V1VerifyFactor200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1VerifyFactor200Response> v1VerifyFactorWithHttpInfo(V1VerifyFactorRequest v1VerifyFactorRequest, String authorization, String customAllowedOriginHeader1) throws ApiException {
        okhttp3.Call localVarCall = v1VerifyFactorValidateBeforeCall(v1VerifyFactorRequest, authorization, customAllowedOriginHeader1, null);
        Type localVarReturnType = new TypeToken<V1VerifyFactor200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param v1VerifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param customAllowedOriginHeader1 Required for CORS requests only. Set to the Origin URI from which you are allowed to send a request using CORS. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1VerifyFactorAsync(V1VerifyFactorRequest v1VerifyFactorRequest, String authorization, String customAllowedOriginHeader1, final ApiCallback<V1VerifyFactor200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1VerifyFactorValidateBeforeCall(v1VerifyFactorRequest, authorization, customAllowedOriginHeader1, _callback);
        Type localVarReturnType = new TypeToken<V1VerifyFactor200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEnrollment
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentCall(Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyEnrollmentRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations/{registration_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "registration_id" + "\\}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEnrollmentValidateBeforeCall(Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyEnrollment(Async)");
        }
        
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling verifyEnrollment(Async)");
        }
        
        // verify the required parameter 'verifyEnrollmentRequest' is set
        if (verifyEnrollmentRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyEnrollmentRequest' when calling verifyEnrollment(Async)");
        }
        

        okhttp3.Call localVarCall = verifyEnrollmentCall(userId, registrationId, verifyEnrollmentRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> verifyEnrollment(Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, String authorization) throws ApiException {
        ApiResponse<List<Registration>> localVarResp = verifyEnrollmentWithHttpInfo(userId, registrationId, verifyEnrollmentRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> verifyEnrollmentWithHttpInfo(Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = verifyEnrollmentValidateBeforeCall(userId, registrationId, verifyEnrollmentRequest, authorization, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param verifyEnrollmentRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentAsync(Integer userId, Integer registrationId, VerifyEnrollmentRequest verifyEnrollmentRequest, String authorization, final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEnrollmentValidateBeforeCall(userId, registrationId, verifyEnrollmentRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyEnrollmentVoiceProtect
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentVoiceProtectCall(Integer userId, Integer registrationId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/registrations/{registration_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "registration_id" + "\\}", localVarApiClient.escapeString(registrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEnrollmentVoiceProtectValidateBeforeCall(Integer userId, Integer registrationId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyEnrollmentVoiceProtect(Async)");
        }
        
        // verify the required parameter 'registrationId' is set
        if (registrationId == null) {
            throw new ApiException("Missing the required parameter 'registrationId' when calling verifyEnrollmentVoiceProtect(Async)");
        }
        

        okhttp3.Call localVarCall = verifyEnrollmentVoiceProtectCall(userId, registrationId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;Registration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public List<Registration> verifyEnrollmentVoiceProtect(Integer userId, Integer registrationId, String authorization) throws ApiException {
        ApiResponse<List<Registration>> localVarResp = verifyEnrollmentVoiceProtectWithHttpInfo(userId, registrationId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;Registration&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Registration>> verifyEnrollmentVoiceProtectWithHttpInfo(Integer userId, Integer registrationId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = verifyEnrollmentVoiceProtectValidateBeforeCall(userId, registrationId, authorization, null);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param registrationId Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyEnrollmentVoiceProtectAsync(Integer userId, Integer registrationId, String authorization, final ApiCallback<List<Registration>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEnrollmentVoiceProtectValidateBeforeCall(userId, registrationId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<Registration>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyFactor
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorCall(Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyFactorRequest;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications/{verification_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "verification_id" + "\\}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyFactorValidateBeforeCall(Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyFactor(Async)");
        }
        
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verifyFactor(Async)");
        }
        
        // verify the required parameter 'verifyFactorRequest' is set
        if (verifyFactorRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyFactorRequest' when calling verifyFactor(Async)");
        }
        

        okhttp3.Call localVarCall = verifyFactorCall(userId, verificationId, verifyFactorRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return GenerateToken400Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public GenerateToken400Response verifyFactor(Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, String authorization) throws ApiException {
        ApiResponse<GenerateToken400Response> localVarResp = verifyFactorWithHttpInfo(userId, verificationId, verifyFactorRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;GenerateToken400Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GenerateToken400Response> verifyFactorWithHttpInfo(Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = verifyFactorValidateBeforeCall(userId, verificationId, verifyFactorRequest, authorization, null);
        Type localVarReturnType = new TypeToken<GenerateToken400Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param verifyFactorRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Typically, this error means that your access token value is invalid. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> FORBIDDEN </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorAsync(Integer userId, Integer verificationId, VerifyFactorRequest verifyFactorRequest, String authorization, final ApiCallback<GenerateToken400Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyFactorValidateBeforeCall(userId, verificationId, verifyFactorRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<GenerateToken400Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyFactorSaml
     * @param verifyFactorSamlRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorSamlCall(VerifyFactorSamlRequest verifyFactorSamlRequest, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyFactorSamlRequest;

        // create path and map variables
        String localVarPath = "/api/2/saml_assertion/verify_factor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyFactorSamlValidateBeforeCall(VerifyFactorSamlRequest verifyFactorSamlRequest, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'verifyFactorSamlRequest' is set
        if (verifyFactorSamlRequest == null) {
            throw new ApiException("Missing the required parameter 'verifyFactorSamlRequest' when calling verifyFactorSaml(Async)");
        }
        

        okhttp3.Call localVarCall = verifyFactorSamlCall(verifyFactorSamlRequest, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param verifyFactorSamlRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return VerifyFactorSaml200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public VerifyFactorSaml200Response verifyFactorSaml(VerifyFactorSamlRequest verifyFactorSamlRequest, String authorization) throws ApiException {
        ApiResponse<VerifyFactorSaml200Response> localVarResp = verifyFactorSamlWithHttpInfo(verifyFactorSamlRequest, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param verifyFactorSamlRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;VerifyFactorSaml200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VerifyFactorSaml200Response> verifyFactorSamlWithHttpInfo(VerifyFactorSamlRequest verifyFactorSamlRequest, String authorization) throws ApiException {
        okhttp3.Call localVarCall = verifyFactorSamlValidateBeforeCall(verifyFactorSamlRequest, authorization, null);
        Type localVarReturnType = new TypeToken<VerifyFactorSaml200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param verifyFactorSamlRequest  (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BAD REQUEST </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> UNAUTHORIZED </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorSamlAsync(VerifyFactorSamlRequest verifyFactorSamlRequest, String authorization, final ApiCallback<VerifyFactorSaml200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyFactorSamlValidateBeforeCall(verifyFactorSamlRequest, authorization, _callback);
        Type localVarReturnType = new TypeToken<VerifyFactorSaml200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyFactorVoice
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorVoiceCall(Integer userId, Integer verificationId, String authorization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/2/mfa/users/{user_id}/verifications/{verification_id}"
            .replaceAll("\\{" + "user_id" + "\\}", localVarApiClient.escapeString(userId.toString()))
            .replaceAll("\\{" + "verification_id" + "\\}", localVarApiClient.escapeString(verificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyFactorVoiceValidateBeforeCall(Integer userId, Integer verificationId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling verifyFactorVoice(Async)");
        }
        
        // verify the required parameter 'verificationId' is set
        if (verificationId == null) {
            throw new ApiException("Missing the required parameter 'verificationId' when calling verifyFactorVoice(Async)");
        }
        

        okhttp3.Call localVarCall = verifyFactorVoiceCall(userId, verificationId, authorization, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return List&lt;VerifyFactorVoice200ResponseInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public List<VerifyFactorVoice200ResponseInner> verifyFactorVoice(Integer userId, Integer verificationId, String authorization) throws ApiException {
        ApiResponse<List<VerifyFactorVoice200ResponseInner>> localVarResp = verifyFactorVoiceWithHttpInfo(userId, verificationId, authorization);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @return ApiResponse&lt;List&lt;VerifyFactorVoice200ResponseInner&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VerifyFactorVoice200ResponseInner>> verifyFactorVoiceWithHttpInfo(Integer userId, Integer verificationId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = verifyFactorVoiceValidateBeforeCall(userId, verificationId, authorization, null);
        Type localVarReturnType = new TypeToken<List<VerifyFactorVoice200ResponseInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param userId Set to the id of the user. (required)
     * @param verificationId The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call. (required)
     * @param authorization Must be in the form of &#39;bearer &lt;access_token&gt;&#39; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> NOT FOUND </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Invalid ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyFactorVoiceAsync(Integer userId, Integer verificationId, String authorization, final ApiCallback<List<VerifyFactorVoice200ResponseInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyFactorVoiceValidateBeforeCall(userId, verificationId, authorization, _callback);
        Type localVarReturnType = new TypeToken<List<VerifyFactorVoice200ResponseInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
