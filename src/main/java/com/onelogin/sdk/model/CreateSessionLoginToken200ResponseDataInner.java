/*
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onelogin.sdk.model.CreateSessionLoginToken200ResponseDataInnerDevicesInner;
import com.onelogin.sdk.model.V1User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.sdk.JSON;

/**
 * CreateSessionLoginToken200ResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-28T11:26:30.153511-07:00[America/Los_Angeles]")
public class CreateSessionLoginToken200ResponseDataInner {
  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_RETURN_TO_URL = "return_to_url";
  @SerializedName(SERIALIZED_NAME_RETURN_TO_URL)
  private String returnToUrl;

  public static final String SERIALIZED_NAME_SESSION_TOKEN = "session_token";
  @SerializedName(SERIALIZED_NAME_SESSION_TOKEN)
  private String sessionToken;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private V1User user;

  public static final String SERIALIZED_NAME_STATE_TOKEN = "state_token";
  @SerializedName(SERIALIZED_NAME_STATE_TOKEN)
  private String stateToken;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<CreateSessionLoginToken200ResponseDataInnerDevicesInner> devices = null;

  public CreateSessionLoginToken200ResponseDataInner() {
  }

  public CreateSessionLoginToken200ResponseDataInner expiresAt(String expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Date and time when session token expires. Tokens expire 2 minutes after creation. Returned only when MFA is not required.
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time when session token expires. Tokens expire 2 minutes after creation. Returned only when MFA is not required.")

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CreateSessionLoginToken200ResponseDataInner returnToUrl(String returnToUrl) {
    
    this.returnToUrl = returnToUrl;
    return this;
  }

   /**
   * Returns the return_to_url value sent in the request, if applicable. Returned only when MFA is not required.
   * @return returnToUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returns the return_to_url value sent in the request, if applicable. Returned only when MFA is not required.")

  public String getReturnToUrl() {
    return returnToUrl;
  }


  public void setReturnToUrl(String returnToUrl) {
    this.returnToUrl = returnToUrl;
  }


  public CreateSessionLoginToken200ResponseDataInner sessionToken(String sessionToken) {
    
    this.sessionToken = sessionToken;
    return this;
  }

   /**
   * Provides the session token that can be used to log the user in. Returned only when MFA is not required.
   * @return sessionToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides the session token that can be used to log the user in. Returned only when MFA is not required.")

  public String getSessionToken() {
    return sessionToken;
  }


  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }


  public CreateSessionLoginToken200ResponseDataInner status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * username_or_email and password values sent are valid. Returned only when MFA is not required.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "username_or_email and password values sent are valid. Returned only when MFA is not required.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public CreateSessionLoginToken200ResponseDataInner user(V1User user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1User getUser() {
    return user;
  }


  public void setUser(V1User user) {
    this.user = user;
  }


  public CreateSessionLoginToken200ResponseDataInner stateToken(String stateToken) {
    
    this.stateToken = stateToken;
    return this;
  }

   /**
   * Value to submit with each Verify Factor API call until session login token is issued. Returned only when MFA required.
   * @return stateToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Value to submit with each Verify Factor API call until session login token is issued. Returned only when MFA required.")

  public String getStateToken() {
    return stateToken;
  }


  public void setStateToken(String stateToken) {
    this.stateToken = stateToken;
  }


  public CreateSessionLoginToken200ResponseDataInner callbackUrl(String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * Verify Factor API endpoint where device_id, state_token, and otp_token must be sent. Returned only when MFA is required.
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Verify Factor API endpoint where device_id, state_token, and otp_token must be sent. Returned only when MFA is required.")

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }


  public CreateSessionLoginToken200ResponseDataInner devices(List<CreateSessionLoginToken200ResponseDataInnerDevicesInner> devices) {
    
    this.devices = devices;
    return this;
  }

  public CreateSessionLoginToken200ResponseDataInner addDevicesItem(CreateSessionLoginToken200ResponseDataInnerDevicesInner devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

   /**
   * Provides device values that must be submitted with the Verify Factor API call. Returned only when MFA is required
   * @return devices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides device values that must be submitted with the Verify Factor API call. Returned only when MFA is required")

  public List<CreateSessionLoginToken200ResponseDataInnerDevicesInner> getDevices() {
    return devices;
  }


  public void setDevices(List<CreateSessionLoginToken200ResponseDataInnerDevicesInner> devices) {
    this.devices = devices;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSessionLoginToken200ResponseDataInner createSessionLoginToken200ResponseDataInner = (CreateSessionLoginToken200ResponseDataInner) o;
    return Objects.equals(this.expiresAt, createSessionLoginToken200ResponseDataInner.expiresAt) &&
        Objects.equals(this.returnToUrl, createSessionLoginToken200ResponseDataInner.returnToUrl) &&
        Objects.equals(this.sessionToken, createSessionLoginToken200ResponseDataInner.sessionToken) &&
        Objects.equals(this.status, createSessionLoginToken200ResponseDataInner.status) &&
        Objects.equals(this.user, createSessionLoginToken200ResponseDataInner.user) &&
        Objects.equals(this.stateToken, createSessionLoginToken200ResponseDataInner.stateToken) &&
        Objects.equals(this.callbackUrl, createSessionLoginToken200ResponseDataInner.callbackUrl) &&
        Objects.equals(this.devices, createSessionLoginToken200ResponseDataInner.devices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresAt, returnToUrl, sessionToken, status, user, stateToken, callbackUrl, devices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSessionLoginToken200ResponseDataInner {\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    returnToUrl: ").append(toIndentedString(returnToUrl)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    stateToken: ").append(toIndentedString(stateToken)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expires_at");
    openapiFields.add("return_to_url");
    openapiFields.add("session_token");
    openapiFields.add("status");
    openapiFields.add("user");
    openapiFields.add("state_token");
    openapiFields.add("callback_url");
    openapiFields.add("devices");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateSessionLoginToken200ResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (CreateSessionLoginToken200ResponseDataInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateSessionLoginToken200ResponseDataInner is not found in the empty JSON string", CreateSessionLoginToken200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateSessionLoginToken200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateSessionLoginToken200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("return_to_url") != null && !jsonObj.get("return_to_url").isJsonNull()) && !jsonObj.get("return_to_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_to_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_to_url").toString()));
      }
      if ((jsonObj.get("session_token") != null && !jsonObj.get("session_token").isJsonNull()) && !jsonObj.get("session_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_token").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        V1User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      if ((jsonObj.get("state_token") != null && !jsonObj.get("state_token").isJsonNull()) && !jsonObj.get("state_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_token").toString()));
      }
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) {
        JsonArray jsonArraydevices = jsonObj.getAsJsonArray("devices");
        if (jsonArraydevices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("devices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
          }

          // validate the optional field `devices` (array)
          for (int i = 0; i < jsonArraydevices.size(); i++) {
            CreateSessionLoginToken200ResponseDataInnerDevicesInner.validateJsonObject(jsonArraydevices.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateSessionLoginToken200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateSessionLoginToken200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateSessionLoginToken200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateSessionLoginToken200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateSessionLoginToken200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, CreateSessionLoginToken200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateSessionLoginToken200ResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateSessionLoginToken200ResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateSessionLoginToken200ResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to CreateSessionLoginToken200ResponseDataInner
  */
  public static CreateSessionLoginToken200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateSessionLoginToken200ResponseDataInner.class);
  }

 /**
  * Convert an instance of CreateSessionLoginToken200ResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

