/*
 * OneLogin API
 * OpenAPI Specification for OneLogin
 *
 * The version of the OpenAPI document: 3.1.0
 * Contact: support@onelogin.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onelogin.sdk.model.GenerateSamlAssertion200ResponseDevicesInner;
import com.onelogin.sdk.model.GenerateSamlAssertion200ResponseUser;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.sdk.JSON;

/**
 * GenerateSamlAssertion200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-04T13:30:16.594658-08:00[America/Los_Angeles]")
public class GenerateSamlAssertion200Response {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_STATE_TOKEN = "state_token";
  @SerializedName(SERIALIZED_NAME_STATE_TOKEN)
  private String stateToken;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private GenerateSamlAssertion200ResponseUser user;

  public static final String SERIALIZED_NAME_DEVICES = "devices";
  @SerializedName(SERIALIZED_NAME_DEVICES)
  private List<GenerateSamlAssertion200ResponseDevicesInner> devices = null;

  public static final String SERIALIZED_NAME_CALLBACK_URL = "callback_url";
  @SerializedName(SERIALIZED_NAME_CALLBACK_URL)
  private String callbackUrl;

  public GenerateSamlAssertion200Response() {
  }

  public GenerateSamlAssertion200Response data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Provides the SAML assertion. Returned only when MFA is not required.
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides the SAML assertion. Returned only when MFA is not required.")

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  public GenerateSamlAssertion200Response message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Plain text description describing the outcome of the response.
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Plain text description describing the outcome of the response.")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public GenerateSamlAssertion200Response stateToken(String stateToken) {
    
    this.stateToken = stateToken;
    return this;
  }

   /**
   * State_token that must be submitted with each Verify Factor API call until the SAML assertion has been issued. Returned only if MFA is required.
   * @return stateToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "State_token that must be submitted with each Verify Factor API call until the SAML assertion has been issued. Returned only if MFA is required.")

  public String getStateToken() {
    return stateToken;
  }


  public void setStateToken(String stateToken) {
    this.stateToken = stateToken;
  }


  public GenerateSamlAssertion200Response user(GenerateSamlAssertion200ResponseUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public GenerateSamlAssertion200ResponseUser getUser() {
    return user;
  }


  public void setUser(GenerateSamlAssertion200ResponseUser user) {
    this.user = user;
  }


  public GenerateSamlAssertion200Response devices(List<GenerateSamlAssertion200ResponseDevicesInner> devices) {
    
    this.devices = devices;
    return this;
  }

  public GenerateSamlAssertion200Response addDevicesItem(GenerateSamlAssertion200ResponseDevicesInner devicesItem) {
    if (this.devices == null) {
      this.devices = new ArrayList<>();
    }
    this.devices.add(devicesItem);
    return this;
  }

   /**
   * Provides device values that must be submitted with the Verify Factor API call. Returned only when MFA is required.
   * @return devices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides device values that must be submitted with the Verify Factor API call. Returned only when MFA is required.")

  public List<GenerateSamlAssertion200ResponseDevicesInner> getDevices() {
    return devices;
  }


  public void setDevices(List<GenerateSamlAssertion200ResponseDevicesInner> devices) {
    this.devices = devices;
  }


  public GenerateSamlAssertion200Response callbackUrl(String callbackUrl) {
    
    this.callbackUrl = callbackUrl;
    return this;
  }

   /**
   * Verify Factor API endpoint to which the device_id, state_token, app_id, and otp_token must be sent. Returned only when MFA is required.
   * @return callbackUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Verify Factor API endpoint to which the device_id, state_token, app_id, and otp_token must be sent. Returned only when MFA is required.")

  public String getCallbackUrl() {
    return callbackUrl;
  }


  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateSamlAssertion200Response generateSamlAssertion200Response = (GenerateSamlAssertion200Response) o;
    return Objects.equals(this.data, generateSamlAssertion200Response.data) &&
        Objects.equals(this.message, generateSamlAssertion200Response.message) &&
        Objects.equals(this.stateToken, generateSamlAssertion200Response.stateToken) &&
        Objects.equals(this.user, generateSamlAssertion200Response.user) &&
        Objects.equals(this.devices, generateSamlAssertion200Response.devices) &&
        Objects.equals(this.callbackUrl, generateSamlAssertion200Response.callbackUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, message, stateToken, user, devices, callbackUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateSamlAssertion200Response {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    stateToken: ").append(toIndentedString(stateToken)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    devices: ").append(toIndentedString(devices)).append("\n");
    sb.append("    callbackUrl: ").append(toIndentedString(callbackUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("message");
    openapiFields.add("state_token");
    openapiFields.add("user");
    openapiFields.add("devices");
    openapiFields.add("callback_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GenerateSamlAssertion200Response
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (GenerateSamlAssertion200Response.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateSamlAssertion200Response is not found in the empty JSON string", GenerateSamlAssertion200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GenerateSamlAssertion200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateSamlAssertion200Response` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) && !jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("state_token") != null && !jsonObj.get("state_token").isJsonNull()) && !jsonObj.get("state_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_token").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        GenerateSamlAssertion200ResponseUser.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
      if (jsonObj.get("devices") != null && !jsonObj.get("devices").isJsonNull()) {
        JsonArray jsonArraydevices = jsonObj.getAsJsonArray("devices");
        if (jsonArraydevices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("devices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `devices` to be an array in the JSON string but got `%s`", jsonObj.get("devices").toString()));
          }

          // validate the optional field `devices` (array)
          for (int i = 0; i < jsonArraydevices.size(); i++) {
            GenerateSamlAssertion200ResponseDevicesInner.validateJsonObject(jsonArraydevices.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("callback_url") != null && !jsonObj.get("callback_url").isJsonNull()) && !jsonObj.get("callback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callback_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateSamlAssertion200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateSamlAssertion200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateSamlAssertion200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateSamlAssertion200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateSamlAssertion200Response>() {
           @Override
           public void write(JsonWriter out, GenerateSamlAssertion200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateSamlAssertion200Response read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GenerateSamlAssertion200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GenerateSamlAssertion200Response
  * @throws IOException if the JSON string is invalid with respect to GenerateSamlAssertion200Response
  */
  public static GenerateSamlAssertion200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateSamlAssertion200Response.class);
  }

 /**
  * Convert an instance of GenerateSamlAssertion200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

