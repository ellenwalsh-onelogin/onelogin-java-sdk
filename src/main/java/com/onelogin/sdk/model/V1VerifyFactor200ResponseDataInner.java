/*
 * OneLogin API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.onelogin.sdk.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.onelogin.sdk.model.V1User;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.onelogin.sdk.JSON;

/**
 * V1VerifyFactor200ResponseDataInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-11-18T10:01:18.133614-08:00[America/Los_Angeles]")
public class V1VerifyFactor200ResponseDataInner {
  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_RETURN_TO_URL = "return_to_url";
  @SerializedName(SERIALIZED_NAME_RETURN_TO_URL)
  private String returnToUrl;

  public static final String SERIALIZED_NAME_SESSION_TOKEN = "session_token";
  @SerializedName(SERIALIZED_NAME_SESSION_TOKEN)
  private String sessionToken;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private V1User user;

  public V1VerifyFactor200ResponseDataInner() {
  }

  public V1VerifyFactor200ResponseDataInner expiresAt(String expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * Date and time at which the session token will expire. Tokens expire two minutes after creation.
   * @return expiresAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date and time at which the session token will expire. Tokens expire two minutes after creation.")

  public String getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public V1VerifyFactor200ResponseDataInner returnToUrl(String returnToUrl) {
    
    this.returnToUrl = returnToUrl;
    return this;
  }

   /**
   * Returns the return_to_url value sent in the request, if applicable.
   * @return returnToUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Returns the return_to_url value sent in the request, if applicable.")

  public String getReturnToUrl() {
    return returnToUrl;
  }


  public void setReturnToUrl(String returnToUrl) {
    this.returnToUrl = returnToUrl;
  }


  public V1VerifyFactor200ResponseDataInner sessionToken(String sessionToken) {
    
    this.sessionToken = sessionToken;
    return this;
  }

   /**
   * Provides the session token that can be used to log the user in.
   * @return sessionToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Provides the session token that can be used to log the user in.")

  public String getSessionToken() {
    return sessionToken;
  }


  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }


  public V1VerifyFactor200ResponseDataInner status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Authenticated: Indicates that the username_or_email and password values sent in the request are valid.
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authenticated: Indicates that the username_or_email and password values sent in the request are valid.")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    this.status = status;
  }


  public V1VerifyFactor200ResponseDataInner user(V1User user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public V1User getUser() {
    return user;
  }


  public void setUser(V1User user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1VerifyFactor200ResponseDataInner v1VerifyFactor200ResponseDataInner = (V1VerifyFactor200ResponseDataInner) o;
    return Objects.equals(this.expiresAt, v1VerifyFactor200ResponseDataInner.expiresAt) &&
        Objects.equals(this.returnToUrl, v1VerifyFactor200ResponseDataInner.returnToUrl) &&
        Objects.equals(this.sessionToken, v1VerifyFactor200ResponseDataInner.sessionToken) &&
        Objects.equals(this.status, v1VerifyFactor200ResponseDataInner.status) &&
        Objects.equals(this.user, v1VerifyFactor200ResponseDataInner.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiresAt, returnToUrl, sessionToken, status, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1VerifyFactor200ResponseDataInner {\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    returnToUrl: ").append(toIndentedString(returnToUrl)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expires_at");
    openapiFields.add("return_to_url");
    openapiFields.add("session_token");
    openapiFields.add("status");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to V1VerifyFactor200ResponseDataInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (V1VerifyFactor200ResponseDataInner.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1VerifyFactor200ResponseDataInner is not found in the empty JSON string", V1VerifyFactor200ResponseDataInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!V1VerifyFactor200ResponseDataInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1VerifyFactor200ResponseDataInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
      if ((jsonObj.get("return_to_url") != null && !jsonObj.get("return_to_url").isJsonNull()) && !jsonObj.get("return_to_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `return_to_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("return_to_url").toString()));
      }
      if ((jsonObj.get("session_token") != null && !jsonObj.get("session_token").isJsonNull()) && !jsonObj.get("session_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_token").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        V1User.validateJsonObject(jsonObj.getAsJsonObject("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1VerifyFactor200ResponseDataInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1VerifyFactor200ResponseDataInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1VerifyFactor200ResponseDataInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1VerifyFactor200ResponseDataInner.class));

       return (TypeAdapter<T>) new TypeAdapter<V1VerifyFactor200ResponseDataInner>() {
           @Override
           public void write(JsonWriter out, V1VerifyFactor200ResponseDataInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1VerifyFactor200ResponseDataInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of V1VerifyFactor200ResponseDataInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of V1VerifyFactor200ResponseDataInner
  * @throws IOException if the JSON string is invalid with respect to V1VerifyFactor200ResponseDataInner
  */
  public static V1VerifyFactor200ResponseDataInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1VerifyFactor200ResponseDataInner.class);
  }

 /**
  * Convert an instance of V1VerifyFactor200ResponseDataInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

